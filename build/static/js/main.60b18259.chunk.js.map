{"version":3,"sources":["components/Loading.js","components/contractHelpers.js","pages/Shard.js","components/Overlays.js","components/ProgressBar.js","pages/PuzzleViewer.js","components/TileStore.js","pages/Packs.js","pages/About.js","pages/MainLayout.js","components/Footer.js","App.js","registerServiceWorker.js","index.js","svg/buy.svg","svg/opensea-logo.svg","svg/collect.svg","svg/puzzle.svg","svg/salary.svg","svg/reddit.svg","svg/discord.svg","svg/github.svg"],"names":["Loading","props","className","message","length","prettyfyId","strId","s","zs","ze","i","lenLeft","nftId","id","toString","padStart","tileImgUri","useBW","tileDataUri","getAllSceneInfo","estile","user","numScenes","a","scenes","sidx","getSceneInfo","push","getTokenBalance","tokenId","balanceOf","_b","totalSupply","_t","balance","supply","sceneId","tokenRangeForScene","_tokRange","tilesPerPuzzle","toNumber","numPuzzles","numTiles","sceneShardInfo","_tileInfo","start_tile_range","end_puzzle_range","start_puzzle_range","end_tile_range","tileTokenStart","tileTokenEnd","puzzleTokenStart","puzzleTokenEnd","tilesLeft","ethCost","escCost","getShardInfo","tileJSON","fetch","rsp","json","ShardInner","prettyId","useState","desc","setDesc","tokInfo","setTokInfo","then","name","src","alt","description","href","address","OpenSeaLogo","Shard","useParams","intId","parseInt","Web3","require","toBN","utils","Modal","ReactDOM","createPortal","onClick","doClose","e","stopPropagation","children","document","querySelector","useInput","type","def","value","setValue","onChange","target","useEscape","onEscape","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","BuyTilesModal","numToBuy","numToBuyInput","buyTilesETH","cost","toWei","estilewrap","buyTilesForETH","from","catch","err","console","log","close","updateSceneInfo","buyTilesEscape","buyTilesForEscape","ethTileCost","escTileCost","bnNumToBuy","ethCostWei","mul","fromWei","ShardPreviewModal","ProgressBar","total","count","barStyle","width","height","marginLeft","marginRight","marginTop","background","display","justifyContent","border","progressStyle","style","alignItems","position","fontSize","left","top","Tile","setBalance","setTotal","isLoading","setLoading","result","update","preview","PuzzleViewer","history","useHistory","sid","pid","puzzleId","sceneLoading","setSceneLoading","sceneDesc","setSceneDesc","buyTilesForSceneId","setBuyTilesForSceneId","previewTokenId","setPreviewTokenId","ownedTokens","setOwnedTokens","updateOwnedTokens","tdesc","found","_owned","map","odesc","puzzleToken","setPuzzleToken","canvasRef","useRef","ownsSolvedToken","draw","context","undefined","ptok","canvas","current","hasBackground","img","Image","onload","drawImage","drawnTokens","tok","tileMeta","timg","th","attributes","tw","tx","ty","this","image","puzzleNamer","setPuzzleNamer","puzzleName","setPuzzleName","showPuzzleNaming","setShowPuzzleNaming","puzzleNamingCost","setPuzzleNamingCost","newPuzzleName","newPuzzleNameInput","refreshPuzzleNameInfo","namer","getScenePuzzleInfo","solvePuzzle","redeemPuzzle","renamePuzzle","nameScenePuzzle","getContext","puzzleTileTokenRows","puzzleTokenRow","gotoScene","_sid","_pid","prevSceneClass","nextSceneClass","prevPuzzleClass","nextPuzzleClass","scene","puzzleTokenId","tileTokenOffset","key","uniqueTokensOwned","reduce","tokenDesc","ref","data-tip","data-for","arrowColor","place","BuySVG","TileStore","setScenes","_scenes","sdesc","scenesDOM","np","randomPuzzle","Math","floor","random","costInEther","newRiftComingSoon","data-effect","data-place","CollectSVG","SolveSVG","EarnSVG","Packs","About","MainLayout","exact","path","page","Footer","GitHubSVG","DiscordSVG","RedditSVG","App","resolve_promise","f","args","Promise","resolve","reject","initWeb3","ethereum","request","method","accounts","updateAccounts","on","enable","web3","currentProvider","error","instantiateContracts","firstTime","eth","getAccounts","updateApp","claimReward","state","contract","contracts_abi","EscapeToken","_EscapeToken","ESTile","_ESTile","ESTileWrapper","_ESTileWrapper","NamingContract","_NamingContract","setProvider","deployed","escape","subscribeToEvents","escapeBalance","getClaimInfo","escapeClaimable","claimLength","numClaims","sceneCount","setState","allEvents","bind","contracts","activeClassName","to","flexGrow","claim","numPacks","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","render","getElementById","URL","process","origin","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.60b18259.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loading.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const Loading = (props) => {\n  return (\n    <div className=\"App-loading\">\n      <div className=\"message\">{props.message}</div>\n      {props.message && props.message.length > 0 &&\n        <div className=\"loading-animation\">\n          <div></div><div></div><div></div>\n        </div>\n      }\n    </div>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////","\nexport const prettyfyId = (strId) => {\n  let s = \"0x\";\n  let zs = strId.length;\n  let ze = 0;\n  for (var i = 0; i < strId.length; i++) {\n    if (strId[i] === '0' && i < zs) zs = i;\n    if (strId[i] === '0' && i > ze) ze = i;\n  }\n  if (zs < 4) zs = 4;\n  let lenLeft = 64 - ze;\n  if (lenLeft < 5) {\n    ze -= (5 - lenLeft);\n  }\n  for (i = 0; i < strId.length; i++) {\n    if (i === zs) { s += \"...\"; }\n    if (i <= ze && i >= zs) continue;\n    s += strId[i];\n  }\n  return s;\n}\n\nexport const nftId = (id) => {\n  return id.toString(16).padStart(64, 0);\n}\n\nexport const tileImgUri = (id, useBW=false) => {\n  if (useBW) {\n    return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\"_bw.png\"\n  }\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".png\";\n}\n\nexport const tileDataUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".json\";\n}\n\nexport const packImgUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/pack/\"+nftId(id)+\".png\";\n}\n\nexport const packGifUri = () => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.gif\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getAllSceneInfo = async (estile, user, numScenes) => {\n  /*\n   *  All pack token ids start at 1, query stats for each one so we know how \n   *  many are left, if they can be purchased and our personal count for them.\n   * \n   *  The `TileStore` component is how we open / purchase / see our packs.\n   */\n  let scenes = [];\n  for (var sidx = 1; sidx <= numScenes; sidx++) {\n    scenes.push(await getSceneInfo(estile, user, sidx));\n  }\n  return scenes;\n}\n\n\nexport const getAllSceneSaleInfo = async (estile, user, numScenes) => {\n    /*\n     *  All pack token ids start at 1, query stats for each one so we know how \n     *  many are left, if they can be purchased and our personal count for them.\n     * \n     *  The `TileStore` component is how we open / purchase / see our scenes.\n     */\n    let scenes = [];\n    for (var sidx = 1; sidx <= numScenes; sidx++) {\n      scenes.push(await getSceneSaleInfo(estile, user, sidx));\n    }\n    return scenes;\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getTokenBalance = async (estile, user, tokenId) => {\n  const _b = await estile.balanceOf(user, tokenId);\n  const _t = await estile.totalSupply(tokenId);\n  return {\n    balance: _b,\n    supply: _t,\n  }\n}\n\n/*\n *  Load scene will fetch a scene and all its tokens (tiles + puzzles)\n *  and compute their balances so that the renderer can fetch the needed\n *  metadata and render our website correctly.\n */\nexport const getSceneInfo = async (estile, user, sceneId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n  const _tileInfo = await estile.sceneShardInfo(sceneId);\n  \n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber();\n  const end_tile_range = start_tile_range + numTiles - 1;\n  const start_puzzle_range = end_tile_range + 1;\n  const end_puzzle_range = start_puzzle_range + numPuzzles - 1;\n\n  return {\n    sceneId: sceneId,\n    tileTokenStart: start_tile_range,\n    tileTokenEnd: end_tile_range,\n    puzzleTokenStart: start_puzzle_range,\n    puzzleTokenEnd: end_puzzle_range,\n    numTiles: numTiles,\n    tilesLeft: _tileInfo[0],\n    ethCost: _tileInfo[1],\n    escCost: _tileInfo[2],\n    numPuzzles: numPuzzles,\n    tilesPerPuzzle: tilesPerPuzzle,\n  };\n}\n\nexport const getPuzzleTokensAndBalances = async (estile, user, sceneId, puzzleId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n\n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber() + (puzzleId * tilesPerPuzzle);\n  const end_tile_range = start_tile_range + tilesPerPuzzle - 1;\n  const puzzleToken = start_tile_range + (numTiles);\n  \n  let tileTokenBalances = [];\n  let tileTokenTotalBalances = [];\n  for (var ttok = start_tile_range; ttok <= end_tile_range; ttok++) {\n    const tokInfo = await getTokenBalance(estile, user, ttok);\n    tileTokenBalances.push(tokInfo.balance.toNumber());\n    tileTokenTotalBalances.push(tokInfo.supply.toNumber());\n  }\n  \n  let puzzleTokenBalance;\n  let puzzleTokenTotalBalance;\n  const tokInfo = await getTokenBalance(estile, user, puzzleToken);\n  puzzleTokenBalance = tokInfo.balance.toNumber();\n  puzzleTokenTotalBalance = tokInfo.supply.toNumber();\n  let canRedeem = true;\n  for (var i = 0; i < tilesPerPuzzle; i++) {\n    if (tileTokenBalances[i] <= 0) canRedeem = false;\n  }\n\n  return {\n    sceneId: sceneId,\n    tileTokenBalances: tileTokenBalances,\n    tileTokenTotalBalances: tileTokenTotalBalances,\n    puzzleTokenBalance: puzzleTokenBalance,\n    puzzleTokenTotalBalance: puzzleTokenTotalBalance,\n    puzzleRedeemable: canRedeem,\n  };\n}\n\nexport const getSceneSaleInfo = async (estile, user, sceneId) => {\n    const _tokRange = await estile.tokenRangeForScene(sceneId);\n    const tilesPerPuzzle = _tokRange[1];\n    const numPuzzles = _tokRange[2];\n    const tilesLeft = await estile.sceneShardInfo(sceneId);\n  \n    return {\n      sceneId: sceneId,\n      tilesLeft: tilesLeft,\n      numPuzzles: numPuzzles,\n      tilesPerPuzzle: tilesPerPuzzle,\n    };\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n","import React, {useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {Loading} from \"../components/Loading.js\";\nimport {tileDataUri, tileImgUri, nftId, prettyfyId, getTokenBalance} from \"../components/contractHelpers.js\";\n\nimport OpenSeaLogo from '../svg/opensea-logo.svg';\n\nconst getShardInfo = async (id) => {\n  const tileJSON = tileDataUri(id);\n  const rsp = await fetch(tileJSON); \n  return await rsp.json();\n}\n\nexport const ShardInner = (props) => {\n  const prettyId = prettyfyId(nftId(props.id));\n  const [desc, setDesc] = useState();\n  const [tokInfo, setTokInfo] = useState();\n\n  if (!desc && props.user && props.estile) {\n    getShardInfo(props.id)\n      .then(setDesc);\n  }\n  if (!tokInfo && props.user && props.estile) {\n    getTokenBalance(props.estile, props.user, props.id)\n      .then(setTokInfo);\n  }\n\n  if (!desc || !tokInfo) {\n    return (\n      <div className=\"Shard-main\">\n        <Loading message=\"Fetching token details\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"shard-main\">\n      <div className=\"shard-header\">\n        {desc.name}\n        <span className=\"grow\" />\n      </div>\n      <div className=\"bg\">\n        <img src={tileImgUri(props.id)} alt={props.id} />\n      </div>\n      <p>{desc.description}</p>\n      <p>The NFT id for this shard is {prettyId}.</p>\n      <p>There are currently {tokInfo.supply.toString()} of these tokens in existence, and you own {tokInfo.balance.toString()} of them!\n      </p>\n      <div className=\"social-link\">\n        <div>View this NFT on: </div>\n        <div>\n          <a href={\"https://testnets.opensea.io/assets/\"+props.estile.address+\"/\"+props.id}>\n            <img src={OpenSeaLogo} alt=\"OpenSea\" /><span>OpenSea</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/*\n *  If we end up rendering shards as a separate page, use this component to \n *  wrap the `ShardInner` and parse the hex string etc from the URL params.\n */\nexport const Shard = (props) => {\n  let {id} = useParams();\n  const intId = parseInt(id, 16);\n  return (\n    <div className=\"shard-page\">\n      <ShardInner {...props} id={intId} />\n    </div>\n  );\n}\n\nexport default Shard;","import React, {useState, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {ShardInner} from \"../pages/Shard.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar Web3 = require(\"web3\");\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const Modal = (props) => {\n  return ReactDOM.createPortal(\n    <div className=\"modal\" onClick={()=>{props.doClose && props.doClose()}}>\n      <div className=\"modal-body\" onClick={(e)=>{e.stopPropagation()}}>\n        {props.children}\n      </div>\n    </div>,\n    document.querySelector(\"#modal\"));\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const useInput = (type, def) => {\n  const [value, setValue] = useState(def);\n  const input = <input value={value} \n                        onChange={e => setValue(e.target.value)} \n                        type={type} />;\n  return [value, input];\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const useEscape = (onEscape) => {\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) \n        onEscape();\n      };\n      window.addEventListener(\"keydown\", handleEsc);\n\n      return () => {\n        window.removeEventListener(\"keydown\", handleEsc);\n      };\n    }, [onEscape]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const BuyTilesModal = (props) => {\n  const [numToBuy, numToBuyInput] = useInput(\"number\", 1);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const buyTilesETH = async () => {\n    let cost = Web3.utils.toWei(\"0.02\", \"ether\");\n    await props.estilewrap.buyTilesForETH(props.sceneId, numToBuy, {\n      value: cost * numToBuy, \n      from: props.user\n    }).catch((err) => {\n      console.log(\"Something went wrong,\", err);\n    });\n    await props.close();\n    await props.updateSceneInfo(props.sceneId);\n  }\n\n  const buyTilesEscape = async () => {\n    await props.estilewrap.buyTilesForEscape(props.sceneId, numToBuy, {\n      from: props.user\n    }).catch((err) => {\n      console.log(\"Something went wrong,\", err);\n    });\n    await props.close();\n    await props.updateSceneInfo(props.sceneId);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  useEscape(() => props.close());\n  \n  const ethTileCost = toBN(Web3.utils.toWei(\"0.02\", \"ether\").toString());\n  const escTileCost = toBN(Web3.utils.toWei(\"5\", \"wei\").toString());\n  const bnNumToBuy = toBN(numToBuy.toString());\n  const ethCostWei = ethTileCost.mul(bnNumToBuy);\n  const escCost = (escTileCost.mul(bnNumToBuy)).toString();\n  const ethCost = Web3.utils.fromWei(ethCostWei, \"ether\").toString();\n\n  return (\n    <>\n      {props.sceneId > 0 &&\n        <Modal doClose={()=>{props.close()}}>\n          <div className=\"tilestore-modal\">\n            <h1>Buying tiles for rift {props.sceneId}</h1>\n            <br></br>\n            <div className=\"col\">\n              <div>Number of shards to purchase:</div>\n            </div> \n            <div className=\"col input-div\">\n              {numToBuyInput}\n            </div>\n            <br></br>\n            <div className=\"col\">\n              <div className=\"clickable\" onClick={() => {buyTilesEscape();}}>Use {escCost} ESC</div>\n              <span className=\"spacer\"></span>\n              <div className=\"clickable\" onClick={() => {buyTilesETH();}}>Use {ethCost} ETH</div>\n              <div className=\"grow\"></div>\n              <div className=\"clickable\" onClick={() => {props.close()}}>CLOSE</div>\n            </div>\n          </div>\n        </Modal>\n      }\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const ShardPreviewModal = (props) => {\n  \n  useEscape(() => props.close());\n\n  return (\n    <>\n      {props.tokenId > 0 &&\n        <Modal>\n          <div className=\"tilestore-modal\">\n            <ShardInner {...props} id={props.tokenId} />\n            <br></br>\n            <div className=\"col\">\n              <div className=\"grow\"></div>\n              <div className=\"clickable\" onClick={() => {props.close()}}>CLOSE</div>\n            </div>\n          </div>\n        </Modal>\n      }\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////","import React from \"react\";\n\nexport const ProgressBar = (props) => {\n  if (!props.total) return (<>...</>);\n  const count = props.count || 0;\n  const barStyle = {\n    width: props.width || \"120px\",\n    height: props.height || \"24px\",\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n    marginTop: \"4px\",\n    background: \"black\",\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    border: \"1px solid var(--color-background)\",\n  };\n  const progressStyle = {\n    background: \"var(--color-special)\",\n    border: \"1px solid var(--color-font)\",\n    width: (100*(count / props.total))+\"%\",\n  };\n  const statusStyle = {\n    height: \"24px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"10pt\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"5px\",\n  };\n  const containerStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n  }\n\n  return (\n    <div className=\"progressbar-container\" style={containerStyle}>\n      <div className=\"progressbar\" style={barStyle}>\n        <div className=\"progress\" style={progressStyle}>\n        </div>\n      </div>\n      <div className=\"status\" style={statusStyle}>\n        {count} / {props.total}\n      </div>\n    </div>\n  )\n}","import React, {useState, useRef, useEffect} from \"react\";\nimport { useParams } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport {Loading} from \"../components/Loading.js\";\nimport {useInput} from \"../components/Overlays.js\";\nimport {ProgressBar} from \"../components/ProgressBar.js\";\nimport {getSceneInfo, getTokenBalance, nftId, prettyfyId, tileImgUri, tileDataUri} from \"../components/contractHelpers.js\";\nimport {BuyTilesModal, ShardPreviewModal} from \"../components/Overlays.js\";\n\nimport BuySVG from \"../svg/buy.svg\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst Tile = (props) => {\n  const [balance, setBalance] = useState(\"...\");\n  const [total, setTotal] = useState(\"...\");\n  const [isLoading, setLoading] = useState(true);\n\n  if (props.estile && props.user && isLoading) {\n    getTokenBalance(props.estile, props.user, props.id)\n      .then((result) => {\n        setBalance(result.balance);\n        setTotal(result.supply);\n        setLoading(false);\n        if (props.update) { \n          props.update(props.id, {\n            id: props.id, \n            balance: result.balance,\n            total: result.supply,\n          });\n        }\n      });\n  }\n  return (\n    <div className=\"th shard-row\" onClick={()=>{props.preview(props.id)}}>\n      <div><img src={tileImgUri(props.id)} alt=\"\" width=\"42px\" height=\"auto\"></img> ({props.type})</div>\n      <div>{balance.toString()}</div>\n      <div>{total.toString()}</div>\n      <div>{prettyfyId(nftId(props.id))}</div>\n    </div>\n  );\n}\n////////////////////////////////////////////////////////////////////////////////\n\nconst PuzzleViewer = (props) => {\n  let history = useHistory();\n  let {sid, pid} = useParams();\n\n  const sceneId = sid;\n  const puzzleId = parseInt(pid) - 1; // 0-based\n  const [sceneLoading, setSceneLoading] = useState(true);\n  const [sceneDesc, setSceneDesc] = useState({});\n  const [buyTilesForSceneId, setBuyTilesForSceneId] = useState(0);\n  const [previewTokenId, setPreviewTokenId] = useState(0);\n\n  const [ownedTokens, setOwnedTokens] = useState([]);\n  const updateOwnedTokens = (id, tdesc) => {\n    let found = false;\n    const _owned = ownedTokens.map((odesc) => {\n      if (odesc.id === tdesc.id) {\n        found = true;\n        return tdesc;\n      } \n      return odesc;\n    });\n    if (found) {\n      setOwnedTokens(_owned);\n    } else {\n      ownedTokens.push(tdesc)\n      setOwnedTokens(ownedTokens);\n    }\n  }\n\n  const [puzzleToken, setPuzzleToken] = useState({});\n  const updatePuzzleToken = (id, tdesc) => {\n    if (canvasRef.current.hasBackground !== id) canvasRef.current.hasBackground = undefined;\n    setPuzzleToken(tdesc);\n  }\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  const canvasRef = useRef(null);\n\n  const ownsSolvedToken = puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0;\n\n  const draw = async (context, reset=false) => {\n    if (sceneDesc.sceneId === undefined) return;\n    \n    const ptok = sceneDesc.puzzleTokenStart + puzzleId;\n    const canvas = canvasRef.current;\n\n    if (!canvas.hasBackground && puzzleToken.balance !== undefined) {\n      var img = new Image();\n      img.width = 1920;\n      img.height = 1080;\n      img.onload = async () => {\n        context.drawImage(img, 0, 0);\n        canvas.hasBackground = ptok;\n        canvas.drawnTokens = {};\n        draw(context);\n      }\n      img.src = tileImgUri(ptok, ownsSolvedToken === false); // enable bw mode for non owned tokens.\n    }\n    \n    if (canvas.hasBackground) {\n      for (let tok of ownedTokens) {\n        // Tokens with no ownership are not drawn.\n        if (tok.balance.toNumber() === 0) continue;\n\n        // Tokens drawn after a clear are not updated if they have also been drawn.\n        if (tok.id in canvas.drawnTokens) continue;\n        canvas.drawnTokens[tok.id] = true;\n        const tileJSON = tileDataUri(tok.id);\n        const rsp = await fetch(tileJSON); \n        const tileMeta = await rsp.json();\n        \n        var timg = new Image();\n        timg.th = tileMeta.attributes[0][\"value\"];\n        timg.tw = tileMeta.attributes[1][\"value\"];\n        timg.tx = tileMeta.attributes[2][\"value\"];\n        timg.ty = tileMeta.attributes[3][\"value\"];\n        timg.width = timg.tw;\n        timg.height = timg.th; \n        timg.onload = function() {\n          context.drawImage(this, this.tx - this.tw / 2, this.ty - this.th / 2);\n        }\n        timg.src = tileMeta.image; \n      }\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const [puzzleNamer, setPuzzleNamer] = useState(\"\");\n  const [puzzleName, setPuzzleName] = useState(\"Unnamed\");\n  const [showPuzzleNaming, setShowPuzzleNaming] = useState(false);\n  const [puzzleNamingCost, setPuzzleNamingCost] = useState(0);\n  const [newPuzzleName, newPuzzleNameInput] = useInput(\"text\", \"\");\n\n  const refreshPuzzleNameInfo = async (sid, pid) => {\n    const result = await props.namer.getScenePuzzleInfo(sid, pid);\n    setPuzzleNamingCost(result[0].toNumber());\n    if (result[1] === \"\") setPuzzleName(\"Unnamed\");\n    else setPuzzleName(result[1]);\n    setPuzzleNamer(result[2]);\n  }\n\n  const solvePuzzle = async (sid, pid) => {\n    await props.estile.redeemPuzzle(sid, pid, {from: props.user});\n  }\n\n  const renamePuzzle = async (sid, pid, name) => {\n    await props.namer.nameScenePuzzle(sid, pid, name, {from: props.user});\n    refreshPuzzleNameInfo(sid, pid);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  useEffect(() => {\n    if (sceneLoading) return;\n    const canvas = canvasRef.current\n    const context = canvas.getContext(\"2d\")\n    draw(context);\n    refreshPuzzleNameInfo(sceneId, puzzleId);\n  }, [draw, refreshPuzzleNameInfo, sceneId, puzzleId, sceneLoading, ownedTokens, puzzleToken, sceneDesc]);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = async (_sid, _pid) => {\n    setShowPuzzleNaming(false);\n    if (_sid !== sceneId) setSceneLoading(true);\n    if (_pid !== puzzleId) setOwnedTokens([]); // reset - ing puzzles.\n    history.push(\"/scene/\" + _sid + \"/puzzle/\" + (_pid+1));\n  }\n  const prevScene = () => { if (sceneId > 1) gotoScene(sceneId - 1, 0); }\n  const nextScene = () => { if (sceneId < props.numScenes.toNumber()) gotoScene(sceneId + 1, 0); }\n  const prevPuzzle = () => { if (puzzleId > 0) gotoScene(sceneId, puzzleId - 1); }\n  const nextPuzzle = () => { if (puzzleId < sceneDesc.numPuzzles - 1) gotoScene(sceneId, puzzleId + 1); }\n  \n  const prevSceneClass = (sceneId > 1) ? \"clickable\" : \"invalid\";\n  const nextSceneClass = (props.numScenes && (sceneId < props.numScenes.toNumber()) ? \"clickable\" : \"invalid\") || \"invalid\";\n  const prevPuzzleClass = (puzzleId > 0) ? \"clickable\" : \"invalid\";\n  const nextPuzzleClass = (puzzleId < sceneDesc.numPuzzles - 1) ? \"clickable\" : \"invalid\";\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (!props.estile || !props.user) return <Loading message=\"Checking contracts \" />;\n\n  if (sceneLoading && props.user && props.estile) {\n    getSceneInfo(props.estile, props.user, sceneId)\n      .then((scene) => {\n        setSceneDesc(scene);\n        setSceneLoading(false);\n      });\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (sceneLoading) {\n    return <Loading message={\"Scene \"+ sceneId +\" loading \"}/>;\n  }\n\n  let puzzleTileTokenRows;\n  let puzzleTokenRow;\n  if (sceneLoading) {\n    puzzleTokenRow = (<></>);\n    puzzleTileTokenRows = (<></>);\n  } else {\n    const puzzleTokenId = sceneDesc.puzzleTokenStart + puzzleId;\n    const tileTokenOffset = puzzleId * sceneDesc.tilesPerPuzzle\n    const tileTokenStart = sceneDesc.tileTokenStart + tileTokenOffset;\n    \n    puzzleTokenRow = <Tile {...props} \n                           update={updatePuzzleToken} \n                           preview={(id) => {setPreviewTokenId(id)}}\n                           type=\"puzzle\" id={puzzleTokenId} \n                           key={puzzleTokenId} />;\n    puzzleTileTokenRows = [];\n    for (var i = 0; i < sceneDesc.tilesPerPuzzle; i++) {\n      puzzleTileTokenRows.push(\n        <Tile {...props} \n              preview={(id) => {setPreviewTokenId(id)}}\n              update={updateOwnedTokens} \n              type=\"tile\" id={tileTokenStart+i} key={tileTokenStart+i} />\n      );\n    }\n  }\n\n  const uniqueTokensOwned = ownedTokens.reduce((count, tokenDesc) => {\n    if (tokenDesc.balance > 0) {\n      return count + 1;\n    }\n    return count;\n  }, 0);\n\n  return (\n    <div className=\"Home-main\">\n      <BuyTilesModal\n        {...props} \n        sceneId={buyTilesForSceneId}\n        updateSceneInfo={() => {setSceneLoading(false)}} \n        close={() => {setBuyTilesForSceneId(0)}} />\n      <ShardPreviewModal \n        {...props}\n        tokenId={previewTokenId}\n        close={() => {setPreviewTokenId(0)}} />\n      {!sceneLoading && \n        <div className=\"title\">\n          <span>Scene</span>\n          <span className={prevSceneClass} onClick={prevScene}>&lt;</span>\n          {sceneId}\n          <span className={nextSceneClass} onClick={nextScene}>&gt;</span>\n          <span className=\"spacer\" />\n          Puzzle\n          <span className={prevPuzzleClass} onClick={prevPuzzle}>&lt;</span>\n          {puzzleId+1}\n          <span className={nextPuzzleClass} onClick={nextPuzzle}>&gt;</span>\n          <span className=\"spacer\" />\n          <span className=\"grow\"></span>\n          {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0 &&\n            <span style={{marginRight: \"15px\"}}>solved x{puzzleToken.balance.toString()}</span>\n          }\n        </div>}\n      \n      {!sceneLoading && \n        <div className=\"puzzle-viewer\">\n          <div className=\"puzzle-name clickable\">\n            <div className=\"grow\" style={{width: \"100%\"}} onClick={()=>{setShowPuzzleNaming(!showPuzzleNaming)}}>\n              \"{puzzleName}\"\n            </div>\n            {showPuzzleNaming && \n              <div className=\"puzzle-name-details\">\n                <div>This puzzle currently costs {puzzleNamingCost} ESCAPE to rename.</div>\n                <div>The last address to name the puzzle was {puzzleNamer}.</div>\n                {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0 &&\n                  <div className=\"puzzle-name-input\">\n                    {newPuzzleNameInput} \n                    <div className=\"clickable\" onClick={()=>{renamePuzzle(sceneId, puzzleId, newPuzzleName)}}>Rename puzzle</div>\n                  </div>\n                }\n                {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() === 0 &&\n                  <div>You must first solve the puzzle to name it.</div>\n                }\n              </div>\n            }\n          </div>\n          <canvas ref={canvasRef} className=\"canvas\" width=\"1920\" height=\"1080\">\n            Blocks: art on the blockchain.\n          </canvas>\n          <div className=\"puzzle-toolbar\">\n            {uniqueTokensOwned < sceneDesc.tilesPerPuzzle &&\n            <>\n              <ProgressBar \n                count={uniqueTokensOwned} \n                total={sceneDesc.tilesPerPuzzle} >\n              </ProgressBar>\n              <div style={{marginLeft: \"8px\", fontSize: \"10pt\"}}>\n                shards collected\n              </div>\n            </>\n            }\n            {uniqueTokensOwned === sceneDesc.tilesPerPuzzle &&\n            <>\n              <div className=\"clickable\" style={{marginLeft: \"15px\"}} \n                   onClick={()=>{solvePuzzle(sceneId, puzzleId)}}\n                   data-tip data-for=\"solveTooltip\">\n                solve puzzle\n              </div>\n              <ReactTooltip id=\"solveTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n                <p>Merge all shards in a puzzle to<br></br> \n                   solve it and mint a rare puzzle<br></br>\n                   token.\n                </p>\n              </ReactTooltip>\n            </>\n            }\n            <div className=\"grow\"></div>\n            <div className=\"col clickable\" onClick={()=>{setBuyTilesForSceneId(sceneId)}}>\n              <img src={BuySVG} alt=\"buy shards\"></img> buy shards\n            </div>\n          </div>\n          <div className=\"token-table\">\n            <div className=\"th underline\">\n              <div></div>\n              <div>Balance</div>\n              <div>Supply</div>\n              <div>Token ID</div>\n            </div>\n            {puzzleTokenRow}\n            {puzzleTileTokenRows}\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default PuzzleViewer;\n  ","import React, {useState} from \"react\";\nimport { useHistory } from \"react-router\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport {Loading} from \"./Loading.js\";\nimport {packGifUri, getAllSceneInfo, getSceneInfo, tileImgUri } from \"./contractHelpers.js\";\nimport {BuyTilesModal} from \"./Overlays.js\";\n\nimport \"./TileStore.css\";\n\nimport CollectSVG from \"../svg/collect.svg\";\nimport SolveSVG from \"../svg/puzzle.svg\";\nimport EarnSVG from \"../svg/salary.svg\";\nimport BuySVG from \"../svg/buy.svg\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar Web3 = require(\"web3\");\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst TileStore = (props) => {\n  const history = useHistory();\n  const [isLoading, setLoading] = useState(true);\n  const [scenes, setScenes] = useState([]);\n  const [buyTilesForSceneId, setBuyTilesForSceneId] = useState(0);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = (sid, pid) => {\n    history.push(\"/scene/\" + sid + \"/puzzle/\" + (pid+1));\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const updateSceneInfo = async (sidx) => {\n    let desc = await getSceneInfo(props.estile, props.user, sidx);\n    let found = false;\n    let _scenes = scenes.map((sdesc) => {\n      if (sdesc.sceneId === desc.sceneId) {\n        found = true;\n        return desc;\n      }\n      return sdesc;\n    });\n    if (found) {\n      setScenes(_scenes);\n    } else {\n      setScenes(...scenes, desc);\n    }\n  }\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  if (!props.estile || !props.user) {\n    return <Loading message=\"Talking to contract\" />;\n  }\n\n  if (props.estile && props.user && props.numScenes && isLoading) {\n    getAllSceneInfo(props.estile, props.user, props.numScenes.toNumber())\n      .then((_scenes) => {\n        setScenes(_scenes)\n        setLoading(false);\n      });\n    return <Loading message=\"Loading scenes\" />;\n  } \n\n  //////////////////////////////////////////////////////////////////////////////\n  const scenesDOM = scenes.map((scene, i) => {\n    const np = scene.puzzleTokenEnd - scene.puzzleTokenStart + 1;\n    const randomPuzzle = scene.puzzleTokenStart + Math.floor(Math.random() * np); \n    const sceneId = scene.sceneId;\n    const costInEther = Web3.utils.fromWei(scene.ethCost.toString(), \"ether\");\n    return (\n      <div key={sceneId} className=\"TileStore-pack\">\n        <div className=\"scene-list\">\n          <div className=\"pack-holder\">\n            <div className=\"pack\" \n                 onClick={()=>{gotoScene(1, 0)}}\n                 data-tip data-for=\"packTooltip\">\n              <img className=\"static\" src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.png\" alt={1} />\n              <img className=\"active\" src={packGifUri()} alt={sceneId} />\n              <img className=\"bg\" src={tileImgUri(randomPuzzle)} alt={sceneId} />\n            </div>\n          </div>\n          <div className=\"scene-details\">\n            <div className=\"col\">\n              <div>rift #{scene.sceneId}</div>\n              <div>{scene.tilesLeft.toString()} shards left</div>\n            </div>\n            <div className=\"col\">\n              <div>shard cost:</div>\n              <div>{costInEther} ETH / {scene.escCost.toString()} ESC</div>\n            </div>\n            {scene.tilesLeft.toNumber() > 0 && \n              <div className=\"col\">\n                <div className=\"grow\"></div>\n                <div className=\"buy-tiles clickable\" onClick={()=>{setBuyTilesForSceneId(sceneId)}}>\n                  <img src={BuySVG} alt=\"buy shards\"></img> buy shards\n                </div>\n              </div>\n            }\n            {scene.tilesLeft.toNumber() === 0 && \n              <div>All sold out, trade shards to solve puzzles!</div>\n            }\n            <ReactTooltip id=\"packTooltip\" place=\"bottom\" arrowColor=\"var(--color-font)\" >\n              <div>Explore rift #{sceneId}</div>\n            </ReactTooltip>\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const newRiftComingSoon = (\n    <div key={1} className=\"TileStore-pack\">\n      <div className=\"scene-list\">\n        <div className=\"pack-holder\">\n          <div className=\"pack\">\n            <img className=\"static\" src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.png\" alt={1} />\n            <img className=\"active\" src={packGifUri()} alt={1} />\n            <div className=\"bg\">?</div>\n          </div>\n        </div>\n        <div className=\"scene-details\">\n          <div className=\"col\">\n            <div></div>\n            <div>new rift dropping soon!</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <div className=\"tooltips\">\n        <ReactTooltip id=\"infoEscapeTooltip\" arrowColor=\"var(--color-font)\">\n          <p>🔥 Burn ESCAPE (ERC20) for shards from open rifts.</p>\n          <p>🔥 Burn ESCAPE to (re)name solved puzzles.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"infoShardTooltip\" arrowColor=\"var(--color-font)\">\n          <p>🧩 Shards are puzzle pieces from EtherScape rifts.</p>\n          <p>📰 Each shard is a NFT (ERC1155) with limited supply.</p>\n          <p>🚧 Rifts will mint random shards until they run out.</p>\n          <p>💰 Trade shard tokens on 3rd party markets.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"infoPuzzleTooltip\" arrowColor=\"var(--color-font)\">\n          <p>🧩 Each rift contains a set number of puzzles to solve.</p>\n          <p>🔥 Burn all shards from a puzzle to solve it.</p>\n          <p>💰 Solved puzzles reward even rarer NFTs and earn 1 ESCAPE per day.</p>\n          <p>💰 Trade completed puzzle tokens on 3rd party markets.</p>\n        </ReactTooltip>\n      </div>\n      <div className=\"TileStore-main\">\n        <BuyTilesModal\n          {...props} \n          sceneId={buyTilesForSceneId}\n          updateSceneInfo={updateSceneInfo} \n          close={() => {setBuyTilesForSceneId(0)}} />\n        <div className=\"TileStore-blurb\">\n          <div className=\"clickable\" data-tip data-for=\"infoShardTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={CollectSVG} alt=\"collect\" />\n            <div>collect shards</div>\n          </div>\n          <div className=\"clickable\" data-tip data-for=\"infoPuzzleTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={SolveSVG} alt=\"solve\" />\n            <div>solve puzzles</div>\n          </div>\n          <div className=\"clickable\" data-tip data-for=\"infoEscapeTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={EarnSVG} alt=\"earn\" />\n            <div>earn ESCAPE</div>\n          </div>\n        </div>\n        <br></br>\n        <div className=\"TileStore-list\">\n          <h4>Open rifts</h4>\n          {scenesDOM}\n          {newRiftComingSoon}\n        </div>\n      </div>\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default TileStore;","import React from \"react\";\n\nimport TileStore from \"../components/TileStore.js\";\n\nconst Packs = (props) => {\n  return (\n    <>\n      <div className=\"Packs-main\">\n        <TileStore {...props} />\n      </div>\n    </>\n  );\n}\n\nexport default Packs;\n  ","import React from \"react\";\n\nconst About = () => {\n  return (\n    <div className=\"About-main\">\n      <h3>What are EtherScapes?</h3>\n      <p>\n        EtherScapes is a procedurally generated jig-saw puzzle collectable. \n      </p>\n      <p>\n        Each scene in our collection is broken up into puzzle pictures.\n        Each picture makes up a puzzle broken into JigSaw tiles. The tiles \n        themselves and the solved puzzles are collectable and tradeable on markets\n        like opensea and rarible (they are tradeable ERC1155 tokens).\n      </p>\n\n      <h3>How does it work?</h3>\n      <p>\n        Purchase packs with ETH or ESCAPE tokens. Each pack is associated with a \n        scene and will mint puzzle tiles from the scene at random. \n      </p>\n      <p>\n        Some packs are special and cannot be purchased for ETH at the contract \n        exchange rate.\n      </p>\n      \n      <h3>ESCAPEs? What are these?</h3>\n      <p>\n        ESCAPEs are a tradeable ERC20 token that is minted by the EtherScapes contract\n        anytime a puzzle in a scene is solved. To solve a puzzle, collect and trade-in\n        all tokens for a single picture (this will burn the induvidual tiles!). However,\n        this will also release a fixed percent of the ESCAPE locked up in the scene's \n        reward pool!\n      </p>\n      <p>\n        ESCAPEs can also be used to give each picture in each scene a name of your \n        choosing. To assign a name to a picture, you must have at-least one token \n        that represents the completed picture. Each time a picture is named, the \n        naming cost for the picture doubles.\n      </p>\n\n      <h3>Other market integration</h3>\n      <p>\n        The puzzle packs, the tiles, and the solved puzzles are all tradeable \n        ERC1155 tokens. This means you can sell / trade the packs without ever\n        opening them! Trade tokens with friends to complete pictures and earn \n        ESCAPE!\n      </p>\n    </div>\n  );\n}\n\nexport default About;\n  ","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport PuzzleViewer from \"./PuzzleViewer.js\";\nimport Packs from \"./Packs.js\";\nimport Shard from \"./Shard.js\";\nimport About from \"./About.js\";\n\n\nconst MainLayout = (props) => {\n  return (\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\n      <Route exact path=\"/\">\n        <Packs page=\"Home\" {...props} />\n      </Route>\n      <Route exact path=\"/scene/:sid/puzzle/:pid\">\n        <PuzzleViewer page=\"PuzzleViewer\" {...props} />\n      </Route>\n      <Route exact path=\"/shard/:id\">\n        <Shard page=\"Shard\" {...props} />\n      </Route>\n      <Route exact path=\"/about\">\n        <About></About>\n      </Route>\n      <Route path=\"*\">\n        <h3>Not sure what you are looking for ... 404!</h3>\n      </Route>\n    </Switch>\n  );\n}\n  \nexport default MainLayout;","import React from \"react\";\n\nimport RedditSVG from \"../svg/reddit.svg\";\nimport DiscordSVG from \"../svg/discord.svg\";\nimport GitHubSVG from \"../svg/github.svg\";\n\nexport const Footer = (props) => {\n  return (\n    <div className=\"footer\">\n      <span>© EtherScapes Inc</span>\n      <span className=\"grow\"></span>\n      <a href=\"https://github.com/etherscapes/contract\"><span><img src={GitHubSVG} alt=\"github\"></img></span></a>\n      <a href=\"https://discord.gg/kTmmeB6bes\"><span><img src={DiscordSVG} alt=\"github\"></img></span></a>\n      <a href=\"https://www.reddit.com/r/Etherscapes\"><span><img src={RedditSVG} alt=\"github\"></img></span></a>\n    </div>\n  );\n}","/*\n *  Entry-point for the RedVsBlue application.\n */\n\n// React and associated components.\nimport React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Web3 from \"web3\";\n\nimport MainLayout from \"./pages/MainLayout.js\";\nimport {Footer} from \"./components/Footer.js\";\n\n// Contract ABIs.\nimport _EscapeToken from \"./contract/EscapeToken.json\";\nimport _ESTile from \"./contract/ESTile.json\";\nimport _ESTileWrapper from \"./contract/ESTileWrapper.json\";\nimport _NamingContract from \"./contract/NamingContract.json\";\n\nimport \"./App.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n  // App constructor - sets up default state.\n  constructor(props) {\n    super(props);\n      \n    this.updateAccounts = this.updateAccounts.bind(this);\n\n    this.web3 = null;\n    this.contracts = {};\n    this.contracts_abi = {};\n    this.accounts = [];\n\n    this.state = {\n      // Number of ESCAPE credit balance for user.\n      escapeBalance: toBN(0),\n      escapeClaimable: toBN(0),\n\n      // Total scene info stuff.\n      numScenes: 0,\n\n      // Number of solved puzzle tokens.\n      numClaims: 0,\n\n      escape: undefined,\n      namer: undefined,\n      estile: undefined,\n      estilewrap: undefined,\n    };\n  }\n\n  // mounted ::\n  componentDidMount() {\n    return this.initWeb3();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Helpers.\n  ////////////////////////////////////////////////////////////////////////////\n\n  resolve_promise = (f, args=[]) => {\n    return new Promise((resolve, reject) => {\n      f(...args, (err, result) => {\n        if (err !== null) reject(err);\n        else resolve(result);\n      });\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Contract basics.\n  ////////////////////////////////////////////////////////////////////////////\n\n  initWeb3 = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        this.updateAccounts(accounts);\n        window.ethereum.on(\"accountsChanged\", this.updateAccounts);\n        window.ethereum.enable();\n      } catch (err) {\n        console.log(\"User denied web3 account access\");\n        return;\n      }\n      this.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.error(\"No web3 provider detected!\");\n      return;\n    }\n\n    return this.instantiateContracts();\n  }\n\n  updateAccounts = async (accounts) => {\n    const firstTime = !(this.accounts && this.accounts[0]);\n    this.accounts = accounts || await this.web3.eth.getAccounts();\n    if (!firstTime) {\n      this.updateApp();\n    }\n  }\n\n\n\n  claimReward = async () => {\n    return await this.state.estile.claimReward({from: this.accounts[0]});\n  }\n\n  instantiateContracts = async () => {\n    const contract = require(\"@truffle/contract\");\n    const user = this.accounts[0];\n    \n    this.contracts_abi.EscapeToken = contract(_EscapeToken);\n    this.contracts_abi.ESTile = contract(_ESTile);\n    this.contracts_abi.ESTileWrapper = contract(_ESTileWrapper);\n    this.contracts_abi.NamingContract = contract(_NamingContract);\n\n    this.contracts_abi.EscapeToken.setProvider(window.web3.currentProvider);\n    this.contracts_abi.ESTile.setProvider(window.web3.currentProvider);\n    this.contracts_abi.ESTileWrapper.setProvider(window.web3.currentProvider);\n    this.contracts_abi.NamingContract.setProvider(window.web3.currentProvider);\n\n    let escape = await this.contracts_abi.EscapeToken.deployed();\n    let estile = await this.contracts_abi.ESTile.deployed();\n    let estilewrap = await this.contracts_abi.ESTileWrapper.deployed();\n    let namer = await this.contracts_abi.NamingContract.deployed();\n\n    await this.subscribeToEvents(estile);    \n\n    let escapeBalance = await escape.balanceOf(user);\n    let escapeClaimable = await estile.getClaimInfo({from: user});\n    let numClaims = await estile.claimLength(user);\n    \n    /*\n     *  Now we need to figure how many scenes there are and how many puzzles \n     *  in each scene. If we have tokens that correspond to a scene, we list \n     *  them here.\n     */\n    let numScenes = await estile.sceneCount();\n\n    /*\n     *  Update app state!\n     */\n    this.setState({\n      numClaims: numClaims,\n      numScenes: numScenes,\n      escapeBalance: escapeBalance,\n      escapeClaimable: escapeClaimable,\n\n      escape: escape,\n      estile: estile,\n      estilewrap: estilewrap,\n      namer: namer,\n    });\n  }\n\n  subscribeToEvents = async (estile) => {\n    console.log(\"subscribe...\");\n    estile.allEvents()\n      .on(\"data\", (e) => {\n        console.log(e);\n      })\n      .on(\"error\", (err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Accounts and other web3.eth stuff.\n  ////////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Round updates for totals, percentages UI etc as well as refresh logic.\n  ////////////////////////////////////////////////////////////////////////////\n\n  updateApp = async() => {    \n    // console.log(\"Account0      = \", this.accounts[0]);\n    // console.log(\"EscapeToken   = \", this.contracts[\"EscapeToken\"].address);\n    // console.log(\"ESTile        = \", this.contracts[\"ESTile\"].address);\n    // console.log(\"ESTileWrapper = \", this.contracts[\"ESTileWrapper\"].address);\n    this.setState({\n      // TODO\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Contract interaction.\n  ////////////////////////////////////////////////////////////////////////////\n  \n  ////////////////////////////////////////////////////////////////////////////\n  // User Interaction.\n  ////////////////////////////////////////////////////////////////////////////\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <NavLink exact activeClassName=\"isActive\" to=\"/\">EtherScapes</NavLink>\n          <NavLink exact activeClassName=\"isActive\" to=\"/about\">FAQ</NavLink>\n          <div className=\"grow\"></div>\n          <div className=\"balance\" data-tip data-for=\"balanceTooltip\">\n            {this.state.escapeBalance.toString()} ESC\n          </div>\n          {this.state.escapeClaimable !== undefined && this.state.escapeClaimable.toNumber() > 0 && \n            <div className=\"balance clickable\" \n                 onClick={()=> {this.claimReward()}} \n                 data-tip data-for=\"claimTooltip\">\n              ({this.state.escapeClaimable.toString()}, +{this.state.numClaims.toString()} per day)\n            </div>\n          }\n          {this.state.escapeClaimable !== undefined && this.state.escapeClaimable.toNumber() === 0 && \n            <div className=\"balance\" data-tip data-for=\"claimTooltip\">\n              ({this.state.escapeClaimable.toString()}, +{this.state.numClaims.toString()} per day)\n            </div>\n          }\n          <ReactTooltip id=\"claimTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n            <p>Claimable ESCAPE, <br></br>\n               earnings per day.\n            </p>\n          </ReactTooltip>   \n          <ReactTooltip id=\"balanceTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n            <p>Your current ESCAPE balance.</p>\n          </ReactTooltip>   \n        </div>\n        <div className=\"App-body\">\n          <div className=\"App-scroll\">\n            <div style={{flexGrow: 1}}>\n              <MainLayout \n                balance={this.state.escapeBalance}\n                claim={this.state.escapeClaimable}\n                numScenes={this.state.numScenes}\n                numPacks={this.state.numPacks}\n                escape={this.state.escape}\n                estile={this.state.estile}\n                namer={this.state.namer}\n                estilewrap={this.state.estilewrap} \n                user={this.accounts[0]}\n              />\n            </div>\n            <Footer />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render((\n  <HashRouter>\n    <App />\n  </HashRouter>\n), document.getElementById(\"root\"));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/buy.fcafa681.svg\";","module.exports = __webpack_public_path__ + \"static/media/opensea-logo.91c20fca.svg\";","module.exports = __webpack_public_path__ + \"static/media/collect.25b81051.svg\";","module.exports = __webpack_public_path__ + \"static/media/puzzle.79cd76ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/salary.c4c37578.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.1dee27c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.e2217522.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.31145889.svg\";"],"sourceRoot":""}