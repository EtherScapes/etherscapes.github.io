{"version":3,"sources":["components/contractHelpers.js","pages/Home.js","pages/PuzzleViewer.js","components/TileStore.js","pages/Packs.js","pages/Shard.js","pages/About.js","pages/MainLayout.js","App.js","registerServiceWorker.js","index.js"],"names":["prettyfyId","strId","s","zs","length","ze","i","lenLeft","nftId","id","toString","padStart","tileImgUri","useBW","tileDataUri","packGifUri","getAllSceneSaleInfo","estile","user","numScenes","a","scenes","sidx","getSceneSaleInfo","push","getTokenBalance","tokenId","balanceOf","_b","totalSupply","_t","balance","supply","getSceneInfo","sceneId","tokenRangeForScene","_tokRange","tilesPerPuzzle","toNumber","numPuzzles","numTiles","sceneTilesLeft","_tilesLeft","start_tile_range","end_puzzle_range","start_puzzle_range","end_tile_range","tileTokenBalances","tileTokenTotalBalances","ttok","tokInfo","puzzleTokenBalances","puzzleTokenTotalBalances","puzzleRedeemable","balOffset","ptok","canRedeem","tileTokenStart","tileTokenEnd","puzzleTokenStart","puzzleTokenEnd","tilesLeft","Home","props","history","useHistory","useState","setNumScenes","loading","setLoading","sceneCount","then","count","className","onClick","sid","pid","Tile","src","width","height","type","total","href","PuzzleViewer","useParams","puzzleId","parseInt","sceneLoading","setSceneLoading","sceneDesc","setSceneDesc","gotoScene","canvasRef","useRef","draw","context","undefined","puzzleToken","puzzleTokenBalance","tileTokenOffset","canvas","current","clearRect","img","Image","onload","drawImage","tileTokenId","tokenBalanceOffset","tileJSON","fetch","rsp","json","tileMeta","timg","th","attributes","tw","tx","ty","this","image","setPuzzleNamer","puzzleName","setPuzzleName","puzzleNamingCost","setPuzzleNamingCost","refreshPuzzleNameInfo","namer","getScenePuzzleInfo","result","solvePuzzle","redeemPuzzle","from","renamePuzzle","name","nameScenePuzzle","useEffect","getContext","scene","puzzleTileTokenRows","puzzleTokenRow","isRedeemable","isRenameable","puzzleTokenId","puzzleTokenBal","puzzleTokenTotalBal","solved","key","ref","Web3","require","TileStore","isLoading","setScenes","updateSceneInfo","desc","found","_scenes","map","sdesc","buyTilesETH","cost","utils","toWei","estilewrap","buyTilesForETH","value","catch","err","console","log","buyTilesEscape","buyTilesForEscape","scenesDOM","alt","role","aria-label","Packs","getShardInfo","Shard","tokId","prettyId","setDesc","setTokInfo","address","About","MainLayout","exact","path","page","App","resolve_promise","f","args","Promise","resolve","reject","initWeb3","window","ethereum","request","method","accounts","updateAccounts","on","enable","web3","currentProvider","error","instantiateContracts","firstTime","eth","getAccounts","updateApp","claimReward","state","contract","contracts_abi","EscapeToken","_EscapeToken","ESTile","_ESTile","ESTileWrapper","_ESTileWrapper","NamingContract","_NamingContract","setProvider","deployed","escape","subscribeToEvents","escapeBalance","getClaimInfo","escapeClaimable","claimLength","numClaims","setState","allEvents","e","bind","contracts","activeClassName","to","claim","numPacks","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qXACaA,EAAa,SAACC,GAIzB,IAHA,IAAIC,EAAI,KACJC,EAAKF,EAAMG,OACXC,EAAK,EACAC,EAAI,EAAGA,EAAIL,EAAMG,OAAQE,IACf,MAAbL,EAAMK,IAAcA,EAAIH,IAAIA,EAAKG,GACpB,MAAbL,EAAMK,IAAcA,EAAID,IAAIA,EAAKC,GAEnCH,EAAK,IAAGA,EAAK,GACjB,IAAII,EAAU,GAAKF,EAInB,IAHIE,EAAU,IACZF,GAAO,EAAIE,GAERD,EAAI,EAAGA,EAAIL,EAAMG,OAAQE,IACxBA,IAAMH,IAAMD,GAAK,OACjBI,GAAKD,GAAMC,GAAKH,IACpBD,GAAKD,EAAMK,IAEb,OAAOJ,GAGIM,EAAQ,SAACC,GACpB,OAAOA,EAAGC,SAAS,IAAIC,SAAS,GAAI,IAGzBC,EAAa,SAACH,GAAqB,IAAjBI,EAAgB,wDAC7C,OAAIA,EACK,sEAAsEL,EAAMC,GAAI,UAElF,sEAAsED,EAAMC,GAAI,QAG5EK,EAAc,SAACL,GAC1B,MAAO,sEAAsED,EAAMC,GAAI,SAO5EM,EAAa,SAACN,GACzB,MAAO,sEAAsED,EAAMC,GAAI,QAoB5EO,EAAmB,uCAAG,WAAOC,EAAQC,EAAMC,GAArB,iBAAAC,EAAA,sDAO3BC,EAAS,GACJC,EAAO,EARe,YAQZA,GAAQH,GARI,6BAS7BE,EAT6B,SASXE,EAAiBN,EAAQC,EAAMI,GATpB,wBAStBE,KATsB,uBAQOF,IARP,gDAWxBD,GAXwB,4CAAH,0DAgBnBI,EAAe,uCAAG,WAAOR,EAAQC,EAAMQ,GAArB,iBAAAN,EAAA,sEACZH,EAAOU,UAAUT,EAAMQ,GADX,cACvBE,EADuB,gBAEZX,EAAOY,YAAYH,GAFP,cAEvBI,EAFuB,yBAGtB,CACLC,QAASH,EACTI,OAAQF,IALmB,2CAAH,0DAcfG,EAAY,uCAAG,WAAOhB,EAAQC,EAAMgB,GAArB,uDAAAd,EAAA,sEACFH,EAAOkB,mBAAmBD,GADxB,cACpBE,EADoB,OAEpBC,EAAiBD,EAAU,GAAGE,WAC9BC,EAAaH,EAAU,GAAGE,WAC1BE,EAAWH,EAAiBE,EAJR,SAMDtB,EAAOwB,eAAeP,GANrB,OAMpBQ,EANoB,OASpBC,EAAmBP,EAAU,GAAGE,WAGhCM,GADAC,GADAC,EAAiBH,EAAmBH,EAAW,GACT,GACED,EAAa,EAEvDQ,EAAoB,GACpBC,EAAyB,GACpBC,EAAON,EAhBU,aAgBQM,GAAQH,GAhBhB,kCAiBFrB,EAAgBR,EAAQC,EAAM+B,GAjB5B,QAiBlBC,EAjBkB,OAkBxBH,EAAkBvB,KAAK0B,EAAQnB,QAAQO,YACvCU,EAAuBxB,KAAK0B,EAAQlB,OAAOM,YAnBnB,QAgBgCW,IAhBhC,wBAsBtBE,EAAsB,GACtBC,EAA2B,GAC3BC,EAAmB,GACnBC,EAAY,EACPC,EAAOV,EA1BU,aA0BUU,GAAQX,GA1BlB,kCA2BFnB,EAAgBR,EAAQC,EAAMqC,GA3B5B,QA+BxB,IAJML,EA3BkB,OA4BxBC,EAAoB3B,KAAK0B,EAAQnB,QAAQO,YACzCc,EAAyB5B,KAAK0B,EAAQlB,OAAOM,YACzCkB,GAAY,EACPlD,EAAI,EAAGA,EAAI+B,EAAgB/B,IAC9ByC,EAAkBO,IAAc,IAAGE,GAAY,GACnDF,GAAa,EAEfD,EAAiB7B,KAAKgC,GAnCE,QA0BoCD,IA1BpC,iDAsCnB,CACLrB,QAASA,EACTuB,eAAgBd,EAChBe,aAAcZ,EACda,iBAAkBd,EAClBe,eAAgBhB,EAChBJ,SAAUA,EACVqB,UAAWnB,EACXH,WAAYA,EACZF,eAAgBA,EAChBU,kBAAmBA,EACnBC,uBAAwBA,EACxBG,oBAAqBA,EACrBC,yBAA0BA,EAC1BC,iBAAkBA,IApDM,4CAAH,0DAwDZ9B,EAAgB,uCAAG,WAAON,EAAQC,EAAMgB,GAArB,qBAAAd,EAAA,sEACJH,EAAOkB,mBAAmBD,GADtB,cACtBE,EADsB,OAEtBC,EAAiBD,EAAU,GAC3BG,EAAaH,EAAU,GAHD,SAIJnB,EAAOwB,eAAeP,GAJlB,cAItB2B,EAJsB,yBAMrB,CACL3B,QAASA,EACT2B,UAAWA,EACXtB,WAAYA,EACZF,eAAgBA,IAVU,2CAAH,0DCrGdyB,EAxCF,SAACC,GAEZ,IAAIC,EAAUC,cAFQ,EAGYC,mBAAS,GAHrB,mBAGJC,GAHI,aAIQD,oBAAS,GAJjB,mBAIfE,EAJe,KAINC,EAJM,KAQlBD,GAAWL,EAAM7C,MAAQ6C,EAAM9C,QACjC8C,EAAM9C,OAAOqD,aACVC,MAAK,SAACC,GACLL,EAAaK,GACbH,GAAW,MAYjB,OACE,yBAAKI,UAAU,aACZL,GACC,6DAEAA,GACA,oCACE,2CACA,yBAAKM,QAAS,WAdJ,IAACC,EAAKC,EAALD,EAckB,EAdbC,EAcgB,EAbtCZ,EAAQxC,KAAK,UAAYmD,EAAM,YAAcC,EAAI,MAa3C,mBACA,yBAAKF,QAAS,WAAKV,EAAQxC,KAAK,YAAhC,4BChCJqD,EAAO,SAACd,GACZ,OACE,yBAAKU,UAAU,MACb,6BAAK,yBAAKK,IAAKlE,EAAWmD,EAAMtD,IAAKsE,MAAM,OAAOC,OAAO,SAAzD,KAAyEjB,EAAMkB,KAA/E,KACA,6BAAMlB,EAAMS,OACZ,6BAAMT,EAAMmB,OACZ,6BAAK,uBAAGC,KAAM,UAAU3E,EAAMuD,EAAMtD,KAAMT,EAAWQ,EAAMuD,EAAMtD,SA6LxD2E,EAvLM,SAACrB,GACpB,IAAIC,EAAUC,cADgB,EAEboB,cAAZV,EAFyB,EAEzBA,IAAKC,EAFoB,EAEpBA,IAEJ1C,EAAUyC,EACVW,EAAWC,SAASX,GAAO,EALH,EAMUV,oBAAS,GANnB,mBAMvBsB,EANuB,KAMTC,EANS,OAOIvB,mBAAS,IAPb,mBAOvBwB,EAPuB,KAOZC,EAPY,KASxBC,EAAY,SAACjB,EAAKC,GACtBZ,EAAQxC,KAAK,UAAYmD,EAAM,YAAcC,EAAI,KAS7CiB,EAAYC,iBAAO,MAEnBC,EAAI,uCAAG,WAAOC,GAAP,yBAAA5E,EAAA,8DACe6E,IAAtBP,EAAUxD,QADH,iDAGLgE,EAAcR,EAAU/B,iBAAmB2B,EAC3Ca,EAAqBT,EAAUvC,oBAAoBmC,GACnDc,EAAkBd,EAAWI,EAAUrD,eACvCoB,EAAiBiC,EAAUjC,eAAiB2C,EAG5CC,EAASR,EAAUS,QACzBN,EAAQO,UAAU,EAAG,EAAGF,EAAOtB,MAAOsB,EAAOrB,SAEzCwB,EAAM,IAAIC,OACV1B,MAAQ,KACZyB,EAAIxB,OAAS,KACbwB,EAAIE,OAAJ,sBAAa,wCAAAtF,EAAA,sDAEX4E,EAAQW,UAAUH,EAAK,EAAG,GAEjBlG,EAAI,EAJF,YAIKA,EAAIoF,EAAUrD,gBAJnB,oBAKHuE,EAAcnD,EAAiBnD,EAC/BuG,EAAqBT,EAAkB9F,EACW,IAApDoF,EAAU3C,kBAAkB8D,GAPvB,6DASHC,EAAWhG,EAAY8F,GATpB,UAUSG,MAAMD,GAVf,eAUHE,EAVG,iBAWcA,EAAIC,OAXlB,QAWHC,EAXG,QAaLC,EAAO,IAAIV,OACVW,GAAKF,EAASG,WAAW,GAApB,MACVF,EAAKG,GAAKJ,EAASG,WAAW,GAApB,MACVF,EAAKI,GAAKL,EAASG,WAAW,GAApB,MACVF,EAAKK,GAAKN,EAASG,WAAW,GAApB,MACVF,EAAKpC,MAAQoC,EAAKG,GAClBH,EAAKnC,OAASmC,EAAKC,GACnBD,EAAKT,OAAS,WACZV,EAAQW,UAAUc,KAAMA,KAAKF,GAAKE,KAAKH,GAAK,EAAGG,KAAKD,GAAKC,KAAKL,GAAK,IAErED,EAAKrC,IAAMoC,EAASQ,MAvBX,QAImCpH,IAJnC,2DA0BbkG,EAAI1B,IAAMlE,EAAWsF,EAAaC,GAAsB,GAzC7C,4CAAH,sDArBoB,EAmEQjC,mBAAS,IAnEjB,mBAmEVyD,GAnEU,aAoEMzD,mBAAS,WApEf,mBAoEvB0D,EApEuB,KAoEXC,EApEW,OAqEkB3D,mBAAS,GArE3B,mBAqEvB4D,EArEuB,KAqELC,EArEK,KAuExBC,EAAqB,uCAAG,WAAOrD,EAAKC,GAAZ,eAAAxD,EAAA,sEACP2C,EAAMkE,MAAMC,mBAAmBvD,EAAKC,GAD7B,OACtBuD,EADsB,OAE5BJ,EAAoBI,EAAO,GAAG7F,YACZ,KAAd6F,EAAO,GAAWN,EAAc,WAC/BA,EAAcM,EAAO,IAC1BR,EAAeQ,EAAO,IALM,2CAAH,wDAQrBC,EAAW,uCAAG,WAAOzD,EAAKC,GAAZ,SAAAxD,EAAA,sEACZ2C,EAAM9C,OAAOoH,aAAa1D,EAAKC,EAAK,CAAC0D,KAAMvE,EAAM7C,OADrC,2CAAH,wDAIXqH,EAAY,uCAAG,WAAO5D,EAAKC,EAAK4D,GAAjB,SAAApH,EAAA,sEACb2C,EAAMkE,MAAMQ,gBAAgB9D,EAAKC,EAAK4D,EAAM,CAACF,KAAMvE,EAAM7C,OAD5C,OAEnB8G,EAAsBrD,EAAKC,GAFR,2CAAH,0DAOlB8D,qBAAU,WACR,IAAIlD,EAAJ,CACA,IACMQ,EADSH,EAAUS,QACFqC,WAAW,MAClC5C,EAAKC,GACLgC,EAAsB9F,EAASoD,MAC9B,CAACS,EAAMiC,IAINxC,GAAgBzB,EAAM7C,MAAQ6C,EAAM9C,QACtCgB,EAAa8B,EAAM9C,OAAQ8C,EAAM7C,KAAMgB,GACpCqC,MAAK,SAACqE,GACLjD,EAAaiD,GACbnD,GAAgB,MAMtB,IAGIoD,EACAC,EAJEC,GAAgBvD,GAAgBE,EAAUrC,iBAAiBiC,GAC3D0D,GAAiBxD,GAAgBE,EAAUvC,oBAAoBmC,GAAY,EAIjF,GAAIE,EACFsD,EAAkB,qCAClBD,EAAuB,yCAClB,CACL,IAAMI,EAAgBvD,EAAU/B,iBAAmB2B,EAC7C4D,EAAiBxD,EAAUvC,oBAAoBmC,GAC/C6D,EAAsBzD,EAAUtC,yBAAyBkC,GACzDc,EAAkBd,EAAWI,EAAUrD,eACvCoB,EAAiBiC,EAAUjC,eAAiB2C,EAElD0C,EAAiB,kBAAC,EAAD,CAAM7D,KAAK,SAASxE,GAAIwI,EAClBG,QAAQ,EACR5E,MAAO0E,EACPhE,MAAOiE,IAC9BN,EAAsB,GACtB,IAAK,IAAIvI,EAAI,EAAGA,EAAIoF,EAAUrD,eAAgB/B,IAC5CuI,EAAoBrH,KAClB,kBAAC,EAAD,CAAMyD,KAAK,OAAOxE,GAAIgD,EAAenD,EAAG+I,IAAK5F,EAAenD,EACtDkE,MAAOkB,EAAU3C,kBAAkBqD,EAAkB9F,GACrD4E,MAAOQ,EAAU1C,uBAAuBoD,EAAkB9F,MAKtE,OACE,yBAAKmE,UAAU,aACZe,GACC,qCAAWtD,EAAX,iBACAsD,GACA,oCAEE,0BAAMd,QAtII,WAAYxC,EAAU,GAAG0D,EAAU1D,EAAU,EAAG,KAsI1D,KACCA,EACD,0BAAMwC,QAvII,WAAYxC,EAAU6B,EAAM5C,UAAUmB,YAAYsD,EAAU1D,EAAU,EAAG,KAuInF,KACA,0BAAMuC,UAAU,WALlB,SAOE,0BAAMC,QAzIK,WAAYY,EAAW,GAAGM,EAAU1D,EAASoD,EAAW,KAyInE,KACCA,EAAS,EACV,0BAAMZ,QA1IK,WAAYY,EAAW,GAAOM,EAAU1D,EAASoD,EAAW,KA0IvE,KACA,0BAAMb,UAAU,WACfsE,GAAgB,0BAAMrE,QAAS,WAAK0D,EAAYlG,EAASoD,KAAzC,gBACjB,0BAAMb,UAAU,WACfmD,EACD,0BAAMnD,UAAU,WACfuE,GAAgB,0BAAMtE,QAAS,WAAK6D,EAAarG,EAASoD,EAAU,YAApD,WAA0EwC,EAA1E,OAGnBtC,GACA,6BACE,4BAAQ8D,IAAKzD,EAAWpB,UAAU,SAASM,MAAM,OAAOC,OAAO,QAA/D,kCAGA,yBAAKP,UAAU,eACb,yBAAKA,UAAU,gBACb,8BACA,wCACA,uCACA,0CAEDqE,EACAD,MC/LTU,EAAOC,EAAQ,KAoGJC,EAlGG,SAAC1F,GAAW,IAAD,EACKG,oBAAS,GADd,mBACpBwF,EADoB,KACTrF,EADS,OAECH,mBAAS,IAFV,mBAEpB7C,EAFoB,KAEZsI,EAFY,KAIrBC,EAAe,uCAAG,WAAOtI,GAAP,mBAAAF,EAAA,sEACLG,EAAiBwC,EAAM9C,OAAQ8C,EAAM7C,KAAMI,GADtC,OAClBuI,EADkB,OAElBC,GAAQ,EACRC,EAAU1I,EAAO2I,KAAI,SAACC,GACxB,OAAIA,EAAM/H,UAAY2H,EAAK3H,SACzB4H,GAAQ,EACDD,GAEFI,KAELH,EACFH,EAAUI,GAEVJ,EAAS,WAAT,cAAatI,GAAb,QAAqBwI,KAbD,2CAAH,sDAiBfK,EAAW,uCAAG,WAAOhI,GAAP,6BAAAd,EAAA,6DAAgBoD,EAAhB,+BAAsB,GACpC2F,EAAOZ,EAAKa,MAAMC,MAAM,OAAQ,SADlB,SAEZtG,EAAMuG,WAAWC,eAAerI,EAASsC,EAAO,CACpDgG,MAAOL,EAAO3F,EACd8D,KAAMvE,EAAM7C,OACXuJ,OAAM,SAACC,GACRC,QAAQC,IAAI,wBAAyBF,MANrB,uBAQZd,EAAgB1H,GARJ,2CAAH,sDAWX2I,EAAc,uCAAG,WAAO3I,EAASiI,GAAhB,2BAAA/I,EAAA,6DAAsBoD,EAAtB,+BAA4B,EAA5B,SACfT,EAAMuG,WAAWQ,kBAAkB5I,EAASsC,EAAO,CACvD8D,KAAMvE,EAAM7C,OACXuJ,OAAM,SAACC,GACRC,QAAQC,IAAI,wBAAyBF,MAJlB,uBAMfd,EAAgB1H,GAND,2CAAH,wDASpB,GAAI6B,EAAM9C,QAAU8C,EAAM7C,MAAQ6C,EAAM5C,WAAauI,EAMnD,OALArF,GAAW,GACXrD,EAAoB+C,EAAM9C,OAAQ8C,EAAM7C,KAAM6C,EAAM5C,UAAUmB,YAC3DiC,MAAK,SAACwF,GACLJ,EAAUI,MAEP,4CAGT,IAAMgB,EAAY1J,EAAO2I,KAAI,SAACpB,EAAOtI,GACnC,IHpBuBG,EGoBjByB,EAAU0G,EAAM1G,QACtB,OACE,yBAAKmH,IAAKnH,EAASuC,UAAU,kBAC3B,yBAAKA,UAAU,OACb,uCAAamE,EAAM1G,SACnB,6BAAM0G,EAAM/E,UAAUnD,WAAtB,gBAEF,6BACA,yBAAK+D,UAAU,QACb,yBAAKA,UAAU,SAASK,KH7BPrE,EG6BuByB,EH5BzC,sEAAsE1B,EAAMC,GAAI,QG4B7BuK,IAAK9I,IACvD,yBAAKuC,UAAU,SAASK,IAAK/D,EAAWmB,GAAU8I,IAAK9I,IACvD,yBAAKuC,UAAU,OACb,yBAAKA,UAAU,OACb,8BACA,yBAAKA,UAAU,SAASmE,EAAM/E,UAAUnD,WAAxC,MAAsD,0BAAMuK,KAAK,MAAMC,aAAW,UAA5B,oBAI5D,6BACA,yBAAKzG,UAAU,OACb,4CACA,yBAAKA,UAAU,SAASC,QAAS,WAAOmG,EAAe3I,EAAS,EAAG,KAAO,EAA1E,QACC0G,EAAM/E,UAAUvB,WAAa,GAC5B,yBAAKmC,UAAU,SAASC,QAAS,WAAOwF,EAAYhI,EAAS,MAA7D,aAEJ,iCAYN,OACE,yBAAKuC,UAAU,kBACb,6BACA,yBAAKA,UAAU,kBACZsG,KCtFMI,EARD,SAACpH,GACb,OACE,yBAAKU,UAAU,cACb,kBAAC,EAAcV,KCFfqH,EAAY,uCAAG,WAAO3K,GAAP,iBAAAW,EAAA,6DACb0F,EAAWhG,EAAYL,GADV,SAEDsG,MAAMD,GAFL,cAEbE,EAFa,gBAGNA,EAAIC,OAHE,mFAAH,sDA+DHoE,EAzDD,SAACtH,GACb4G,QAAQC,IAAI,eACZD,QAAQC,IAAI7G,GAFW,IAGlBtD,EAAM4E,cAAN5E,GACC6K,EAAQ/F,SAAS9E,EAAI,IACrB8K,EAAWvL,EAAWS,GALL,EAMCyD,qBAND,mBAMhB2F,EANgB,KAMV2B,EANU,OAOOtH,qBAPP,mBAOhBhB,EAPgB,KAOPuI,EAPO,KAiBvB,OARK5B,GAAQ9F,EAAM7C,MAAQ6C,EAAM9C,QAC/BmK,EAAa3K,GACV8D,KAAKiH,IAELtI,GAAWa,EAAM7C,MAAQ6C,EAAM9C,QAClCQ,EAAgBsC,EAAM9C,OAAQ8C,EAAM7C,KAAMoK,GACvC/G,KAAKkH,GAGR,yBAAKhH,UAAU,cACb,yBAAKA,UAAU,MACb,yBAAKK,IAAKlE,EAAWH,GAAKuK,IAAKvK,KAEjC,yBAAKgE,UAAU,OACb,yCACA,6BAAM8G,SAEEtF,IAAT4D,GACC,oDAEDA,GAAQ9F,EAAM9C,QACb,oCACE,yBAAKwD,UAAU,OACb,qCACA,6BAAMoF,EAAKrB,OAEb,uBAAGrD,KAAM,sCAAsCpB,EAAM9C,OAAOyK,QAAQ,IAAIJ,GAAxE,yBAGSrF,IAAZ/C,GACC,oDAEDA,GACC,oCACE,yBAAKuB,UAAU,OACb,6CACA,6BAAMvB,EAAQnB,QAAQrB,aAExB,yBAAK+D,UAAU,OACb,6CACA,6BAAMvB,EAAQlB,OAAOtB,gBCRlBiL,EAlDD,WACZ,OACE,yBAAKlH,UAAU,cACb,qDACA,kGAGA,0SAOA,iDACA,kKAIA,oHAKA,wDACA,wWAOA,iSAOA,wDACA,2PCPSmH,EAzBI,SAAC7H,GAClB,OACE,kBAAC,IAAD,SACE,kBAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,eAAMC,KAAK,QAAWhI,KAExB,kBAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,2BAChB,kBAAC,EAAD,eAAcC,KAAK,gBAAmBhI,KAExC,kBAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,eAAOC,KAAK,SAAYhI,KAE1B,kBAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,cAChB,kBAAC,EAAD,eAAOC,KAAK,SAAYhI,KAE1B,kBAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,6E,oCCyMOE,G,yDA7Mb,WAAYjI,GAAQ,IAAD,8BACjB,cAAMA,IAoCRkI,gBAAkB,SAACC,GAAgB,IAAbC,EAAY,uDAAP,GACzB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BJ,EAAC,WAAD,cAAKC,GAAL,QAAW,SAACzB,EAAKvC,GACH,OAARuC,EAAc4B,EAAO5B,GACpB2B,EAAQlE,WAzCA,EAkDnBoE,SAlDmB,sBAkDR,4BAAAnL,EAAA,yDACsB,qBAApBoL,OAAOC,SADT,0CAGkBD,OAAOC,SAASC,QAAQ,CAC7CC,OAAQ,wBAJL,OAGCC,EAHD,OAML,EAAKC,eAAeD,GACpBJ,OAAOC,SAASK,GAAG,kBAAmB,EAAKD,gBAC3CL,OAAOC,SAASM,SARX,yDAULpC,QAAQC,IAAI,mCAVP,2BAaP,EAAKoC,KAAO,IAAIzD,IAAKiD,OAAOC,UAbrB,4BAcED,OAAOQ,KAdT,iBAeP,EAAKA,KAAO,IAAIzD,IAAKiD,OAAOQ,KAAKC,iBAf1B,+BAiBPtC,QAAQuC,MAAM,8BAjBP,oDAqBF,EAAKC,wBArBH,0DAlDQ,EA0EnBN,eA1EmB,uCA0EF,WAAOD,GAAP,eAAAxL,EAAA,yDACTgM,IAAc,EAAKR,UAAY,EAAKA,SAAS,IADpC,KAECA,EAFD,qCAEmB,EAAKI,KAAKK,IAAIC,cAFjC,0BAEf,EAAKV,SAFU,KAGVQ,GACH,EAAKG,YAJQ,2CA1EE,wDAoFnBC,YApFmB,sBAoFL,sBAAApM,EAAA,sEACC,EAAKqM,MAAMxM,OAAOuM,YAAY,CAAClF,KAAM,EAAKsE,SAAS,KADpD,mFApFK,EAwFnBO,qBAxFmB,sBAwFI,8CAAA/L,EAAA,6DACfsM,EAAWlE,EAAQ,KACnBtI,EAAO,EAAK0L,SAAS,GAE3B,EAAKe,cAAcC,YAAcF,EAASG,GAC1C,EAAKF,cAAcG,OAASJ,EAASK,GACrC,EAAKJ,cAAcK,cAAgBN,EAASO,GAC5C,EAAKN,cAAcO,eAAiBR,EAASS,GAE7C,EAAKR,cAAcC,YAAYQ,YAAY5B,OAAOQ,KAAKC,iBACvD,EAAKU,cAAcG,OAAOM,YAAY5B,OAAOQ,KAAKC,iBAClD,EAAKU,cAAcK,cAAcI,YAAY5B,OAAOQ,KAAKC,iBACzD,EAAKU,cAAcO,eAAeE,YAAY5B,OAAOQ,KAAKC,iBAZrC,UAcF,EAAKU,cAAcC,YAAYS,WAd7B,eAcjBC,EAdiB,iBAeF,EAAKX,cAAcG,OAAOO,WAfxB,eAejBpN,EAfiB,iBAgBE,EAAK0M,cAAcK,cAAcK,WAhBnC,eAgBjB/D,EAhBiB,iBAiBH,EAAKqD,cAAcO,eAAeG,WAjB/B,eAiBjBpG,EAjBiB,iBAmBf,EAAKsG,kBAAkBtN,GAnBR,yBAqBKqN,EAAO3M,UAAUT,GArBtB,eAqBjBsN,EArBiB,iBAsBOvN,EAAOwN,aAAa,CAACnG,KAAMpH,IAtBlC,eAsBjBwN,EAtBiB,iBAuBCzN,EAAO0N,YAAYzN,GAvBpB,eAuBjB0N,EAvBiB,iBA8BC3N,EAAOqD,aA9BR,QA8BjBnD,EA9BiB,OAmCrB,EAAK0N,SAAS,CACZD,UAAWA,EACXzN,UAAWA,EACXqN,cAAeA,EACfE,gBAAiBA,EAEjBJ,OAAQA,EACRrN,OAAQA,EACRqJ,WAAYA,EACZrC,MAAOA,IA5CY,4CAxFJ,EAwInBsG,kBAxImB,uCAwIC,WAAOtN,GAAP,SAAAG,EAAA,sDAClBuJ,QAAQC,IAAI,gBACZ3J,EAAO6N,YACJhC,GAAG,QAAQ,SAACiC,GACXpE,QAAQC,IAAImE,MAEbjC,GAAG,SAAS,SAACpC,GACZC,QAAQC,IAAI,QAASF,MAPP,2CAxID,wDA4JnB6C,UA5JmB,sBA4JP,sBAAAnM,EAAA,sDAKV,EAAKyN,SAAS,IALJ,2CAzJV,EAAKhC,eAAiB,EAAKA,eAAemC,KAApB,gBAEtB,EAAKhC,KAAO,KACZ,EAAKiC,UAAY,GACjB,EAAKtB,cAAgB,GACrB,EAAKf,SAAW,GAEhB,EAAKa,MAAQ,CAEXe,cAAe,EACfE,gBAAiB,EAGjBvN,UAAW,EAGXyN,UAAW,EAEXN,YAAQrI,EACRgC,WAAOhC,EACPhF,YAAQgF,EACRqE,gBAAYrE,GAxBG,E,qDA6BnB,WACE,OAAOwB,KAAK8E,a,oBAgJd,WAAU,IAAD,OACP,OACE,yBAAK9H,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAASoH,OAAK,EAACqD,gBAAgB,WAAWC,GAAG,KAA7C,eACA,kBAAC,IAAD,CAAStD,OAAK,EAACqD,gBAAgB,WAAWC,GAAG,UAA7C,SACA,kBAAC,IAAD,CAAStD,OAAK,EAACqD,gBAAgB,WAAWC,GAAG,UAA7C,SACA,yBAAK1K,UAAU,SACf,yBAAKA,UAAU,WAAWgD,KAAKgG,MAAMe,cAAc9N,WAAnD,QACA,yBAAK+D,UAAU,UAAUC,QAAS,WAAM,EAAK8I,gBAA7C,IAA+D/F,KAAKgG,MAAMiB,gBAAgBhO,WAA1F,MAAyG+G,KAAKgG,MAAMmB,UAAUlO,WAA9H,cAEF,yBAAK+D,UAAU,YACb,kBAAC,EAAD,CACE1C,QAAS0F,KAAKgG,MAAMe,cACpBY,MAAO3H,KAAKgG,MAAMiB,gBAClBvN,UAAWsG,KAAKgG,MAAMtM,UACtBkO,SAAU5H,KAAKgG,MAAM4B,SACrBf,OAAQ7G,KAAKgG,MAAMa,OACnBrN,OAAQwG,KAAKgG,MAAMxM,OACnBgH,MAAOR,KAAKgG,MAAMxF,MAClBqC,WAAY7C,KAAKgG,MAAMnD,WACvBpJ,KAAMuG,KAAKmF,SAAS,W,GArMd0C,cCbZC,EAAcC,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTtL,MAAK,SAAA0L,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,QACfqC,UAAUC,cAAcO,WAK1B3F,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM,SAAAyC,GACLvC,QAAQuC,MAAM,4CAA6CA,MCvEjEqD,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAELC,SAASC,eAAe,SDQZ,WACb,GAA6C,kBAAmBZ,UAAW,CAGzE,GADkB,IAAIa,IAAIC,GAAwBpE,OAAOiD,UAC3CoB,SAAWrE,OAAOiD,SAASoB,OAIvC,OAGFrE,OAAOsE,iBAAiB,QAAQ,WAC9B,IAAMjB,EAAK,UAAMe,GAAN,sBAEPrB,IAiDV,SAAiCM,GAE/B9I,MAAM8I,GACHtL,MAAK,SAAAwM,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAM7M,MAAK,SAAA0L,GACjCA,EAAaoB,aAAa9M,MAAK,WAC7BiI,OAAOiD,SAAS6B,eAKpB1B,EAAgBC,MAGnBpF,OAAM,WACLE,QAAQC,IACN,oEArEA2G,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAM7M,MAAK,WACjCoG,QAAQC,IACN,gHAMJgF,EAAgBC,OClCxB2B,I","file":"static/js/main.c793ab85.chunk.js","sourcesContent":["\nexport const prettyfyId = (strId) => {\n  let s = \"0x\";\n  let zs = strId.length;\n  let ze = 0;\n  for (var i = 0; i < strId.length; i++) {\n    if (strId[i] === '0' && i < zs) zs = i;\n    if (strId[i] === '0' && i > ze) ze = i;\n  }\n  if (zs < 4) zs = 4;\n  let lenLeft = 64 - ze;\n  if (lenLeft < 5) {\n    ze -= (5 - lenLeft);\n  }\n  for (i = 0; i < strId.length; i++) {\n    if (i === zs) { s += \"...\"; }\n    if (i <= ze && i >= zs) continue;\n    s += strId[i];\n  }\n  return s;\n}\n\nexport const nftId = (id) => {\n  return id.toString(16).padStart(64, 0);\n}\n\nexport const tileImgUri = (id, useBW=false) => {\n  if (useBW) {\n    return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\"_bw.png\"\n  }\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".png\";\n}\n\nexport const tileDataUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".json\";\n}\n\nexport const packImgUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/pack/\"+nftId(id)+\".png\";\n}\n\nexport const packGifUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/pack/\"+nftId(id)+\".gif\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getAllSceneInfo = async (estile, user, numScenes) => {\n  /*\n   *  All pack token ids start at 1, query stats for each one so we know how \n   *  many are left, if they can be purchased and our personal count for them.\n   * \n   *  The `TileStore` component is how we open / purchase / see our packs.\n   */\n  let scenes = [];\n  for (var sidx = 1; sidx <= numScenes; sidx++) {\n    scenes.push(await getSceneInfo(estile, user, sidx));\n  }\n  return scenes;\n}\n\n\nexport const getAllSceneSaleInfo = async (estile, user, numScenes) => {\n    /*\n     *  All pack token ids start at 1, query stats for each one so we know how \n     *  many are left, if they can be purchased and our personal count for them.\n     * \n     *  The `TileStore` component is how we open / purchase / see our scenes.\n     */\n    let scenes = [];\n    for (var sidx = 1; sidx <= numScenes; sidx++) {\n      scenes.push(await getSceneSaleInfo(estile, user, sidx));\n    }\n    return scenes;\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getTokenBalance = async (estile, user, tokenId) => {\n  const _b = await estile.balanceOf(user, tokenId);\n  const _t = await estile.totalSupply(tokenId);\n  return {\n    balance: _b,\n    supply: _t,\n  }\n}\n\n/*\n *  Load scene will fetch a scene and all its tokens (tiles + puzzles)\n *  and compute their balances so that the renderer can fetch the needed\n *  metadata and render our website correctly.\n */\nexport const getSceneInfo = async (estile, user, sceneId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n\n  const _tilesLeft = await estile.sceneTilesLeft(sceneId);\n  \n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber();\n  const end_tile_range = start_tile_range + numTiles - 1;\n  const start_puzzle_range = end_tile_range + 1;\n  const end_puzzle_range = start_puzzle_range + numPuzzles - 1;\n  \n  let tileTokenBalances = [];\n  let tileTokenTotalBalances = [];\n  for (var ttok = start_tile_range; ttok <= end_tile_range; ttok++) {\n    const tokInfo = await getTokenBalance(estile, user, ttok);\n    tileTokenBalances.push(tokInfo.balance.toNumber());\n    tileTokenTotalBalances.push(tokInfo.supply.toNumber());\n  }\n  \n  let puzzleTokenBalances = [];\n  let puzzleTokenTotalBalances = [];\n  let puzzleRedeemable = [];\n  let balOffset = 0;\n  for (var ptok = start_puzzle_range; ptok <= end_puzzle_range; ptok++) {\n    const tokInfo = await getTokenBalance(estile, user, ptok);\n    puzzleTokenBalances.push(tokInfo.balance.toNumber());\n    puzzleTokenTotalBalances.push(tokInfo.supply.toNumber());\n    let canRedeem = true;\n    for (var i = 0; i < tilesPerPuzzle; i++) {\n      if (tileTokenBalances[balOffset] <= 0) canRedeem = false;\n      balOffset += 1;\n    }\n    puzzleRedeemable.push(canRedeem);\n  }\n\n  return {\n    sceneId: sceneId,\n    tileTokenStart: start_tile_range,\n    tileTokenEnd: end_tile_range,\n    puzzleTokenStart: start_puzzle_range,\n    puzzleTokenEnd: end_puzzle_range,\n    numTiles: numTiles,\n    tilesLeft: _tilesLeft,\n    numPuzzles: numPuzzles,\n    tilesPerPuzzle: tilesPerPuzzle,\n    tileTokenBalances: tileTokenBalances,\n    tileTokenTotalBalances: tileTokenTotalBalances,\n    puzzleTokenBalances: puzzleTokenBalances,\n    puzzleTokenTotalBalances: puzzleTokenTotalBalances,\n    puzzleRedeemable: puzzleRedeemable,\n  };\n}\n\nexport const getSceneSaleInfo = async (estile, user, sceneId) => {\n    const _tokRange = await estile.tokenRangeForScene(sceneId);\n    const tilesPerPuzzle = _tokRange[1];\n    const numPuzzles = _tokRange[2];\n    const tilesLeft = await estile.sceneTilesLeft(sceneId);\n  \n    return {\n      sceneId: sceneId,\n      tilesLeft: tilesLeft,\n      numPuzzles: numPuzzles,\n      tilesPerPuzzle: tilesPerPuzzle,\n    };\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n","import React, {useState, useRef, useEffect} from \"react\";\nimport {useHistory} from \"react-router-dom\";\n\nimport {getSceneInfo, nftId, prettyfyId, tileImgUri, tileDataUri} from \"../components/contractHelpers.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst Home = (props) => {  \n  \n  let history = useHistory();\n  const [numScenes, setNumScenes] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (loading && props.user && props.estile) {\n    props.estile.sceneCount()\n      .then((count) => { \n        setNumScenes(count);\n        setLoading(false);\n      });\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = (sid, pid) => {\n    history.push(\"/scene/\" + sid + \"/puzzle/\" + (pid+1));\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  return (\n    <div className=\"Home-main\">\n      {loading && \n        <div>Talking to the contract ...</div>\n      }\n      {!loading && \n        <>\n          <h3>EtherScapes</h3>\n          <div onClick={()=>{gotoScene(1, 0)}}>Explore Scene 1</div>\n          <div onClick={()=>{history.push(\"/packs\")}}>Purchase tiles today!</div>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default Home;\n  ","import React, {useState, useRef, useEffect} from \"react\";\nimport { useParams } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {getSceneInfo, nftId, prettyfyId, tileImgUri, tileDataUri} from \"../components/contractHelpers.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst Tile = (props) => {\n  return (\n    <div className=\"th\">\n      <div><img src={tileImgUri(props.id)} width=\"42px\" height=\"42px\"></img> ({props.type})</div>\n      <div>{props.count}</div>\n      <div>{props.total}</div>\n      <div><a href={\"/shard/\"+nftId(props.id)}>{prettyfyId(nftId(props.id))}</a></div>\n    </div>\n  );\n}\n////////////////////////////////////////////////////////////////////////////////\n\nconst PuzzleViewer = (props) => {\n  let history = useHistory();\n  let {sid, pid} = useParams();\n\n  const sceneId = sid;\n  const puzzleId = parseInt(pid) - 1; // 0-based\n  const [sceneLoading, setSceneLoading] = useState(true);\n  const [sceneDesc, setSceneDesc] = useState({});\n\n  const gotoScene = (sid, pid) => {\n    history.push(\"/scene/\" + sid + \"/puzzle/\" + (pid+1));\n  }\n  const prevScene = () => { if (sceneId > 1) gotoScene(sceneId - 1, 0); }\n  const nextScene = () => { if (sceneId < props.numScenes.toNumber()) gotoScene(sceneId + 1, 0); }\n  const prevPuzzle = () => { if (puzzleId > 0) gotoScene(sceneId, puzzleId - 1); }\n  const nextPuzzle = () => { if (puzzleId < 5 - 1) gotoScene(sceneId, puzzleId + 1); }\n\n  //////////////////////////////////////////////////////////////////////////////\n  \n  const canvasRef = useRef(null);\n\n  const draw = async (context) => {\n    if (sceneDesc.sceneId === undefined) return;\n    \n    const puzzleToken = sceneDesc.puzzleTokenStart + puzzleId;\n    const puzzleTokenBalance = sceneDesc.puzzleTokenBalances[puzzleId];\n    const tileTokenOffset = puzzleId * sceneDesc.tilesPerPuzzle\n    const tileTokenStart = sceneDesc.tileTokenStart + tileTokenOffset;\n  \n    // Draw the appropriate image, use the _bw.png if the balance is 0.\n    const canvas = canvasRef.current;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    \n    var img = new Image();\n    img.width = 1920;\n    img.height = 1080;\n    img.onload = async () => {\n      // TODO: Debounce if pid / sid changed for the inner draws.\n      context.drawImage(img, 0, 0);\n\n      for (var i = 0; i < sceneDesc.tilesPerPuzzle; i++) {\n        const tileTokenId = tileTokenStart + i;\n        const tokenBalanceOffset = tileTokenOffset + i; \n        if (sceneDesc.tileTokenBalances[tokenBalanceOffset] === 0) continue;\n        \n        const tileJSON = tileDataUri(tileTokenId);\n        const rsp = await fetch(tileJSON); \n        const tileMeta = await rsp.json();\n        \n        var timg = new Image();\n        timg.th = tileMeta.attributes[0][\"value\"];\n        timg.tw = tileMeta.attributes[1][\"value\"];\n        timg.tx = tileMeta.attributes[2][\"value\"];\n        timg.ty = tileMeta.attributes[3][\"value\"];\n        timg.width = timg.tw;\n        timg.height = timg.th; \n        timg.onload = function() {\n          context.drawImage(this, this.tx - this.tw / 2, this.ty - this.th / 2);\n        }\n        timg.src = tileMeta.image;        \n      }\n    }\n    img.src = tileImgUri(puzzleToken, puzzleTokenBalance <= 0);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const [puzzleNamer, setPuzzleNamer] = useState(\"\");\n  const [puzzleName, setPuzzleName] = useState(\"Unnamed\");\n  const [puzzleNamingCost, setPuzzleNamingCost] = useState(0);\n\n  const refreshPuzzleNameInfo = async (sid, pid) => {\n    const result = await props.namer.getScenePuzzleInfo(sid, pid);\n    setPuzzleNamingCost(result[0].toNumber());\n    if (result[1] === \"\") setPuzzleName(\"Unnamed\");\n    else setPuzzleName(result[1]);\n    setPuzzleNamer(result[2]);\n  }\n\n  const solvePuzzle = async (sid, pid) => {\n    await props.estile.redeemPuzzle(sid, pid, {from: props.user});\n  }\n\n  const renamePuzzle = async (sid, pid, name) => {\n    await props.namer.nameScenePuzzle(sid, pid, name, {from: props.user});\n    refreshPuzzleNameInfo(sid, pid);\n  }\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  useEffect(() => {\n    if (sceneLoading) return;\n    const canvas = canvasRef.current\n    const context = canvas.getContext(\"2d\")\n    draw(context)\n    refreshPuzzleNameInfo(sceneId, puzzleId);\n  }, [draw, refreshPuzzleNameInfo]);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (sceneLoading && props.user && props.estile) {\n    getSceneInfo(props.estile, props.user, sceneId)\n      .then((scene) => {\n        setSceneDesc(scene);\n        setSceneLoading(false);\n      });\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const isRedeemable = !sceneLoading && sceneDesc.puzzleRedeemable[puzzleId];\n  const isRenameable  = !sceneLoading && sceneDesc.puzzleTokenBalances[puzzleId] > 0;\n  \n  let puzzleTileTokenRows;\n  let puzzleTokenRow;\n  if (sceneLoading) {\n    puzzleTokenRow = (<></>);\n    puzzleTileTokenRows = (<></>);\n  } else {\n    const puzzleTokenId = sceneDesc.puzzleTokenStart + puzzleId;\n    const puzzleTokenBal = sceneDesc.puzzleTokenBalances[puzzleId];\n    const puzzleTokenTotalBal = sceneDesc.puzzleTokenTotalBalances[puzzleId];\n    const tileTokenOffset = puzzleId * sceneDesc.tilesPerPuzzle\n    const tileTokenStart = sceneDesc.tileTokenStart + tileTokenOffset;\n    \n    puzzleTokenRow = <Tile type=\"puzzle\" id={puzzleTokenId} \n                           solved={true}\n                           count={puzzleTokenBal} \n                           total={puzzleTokenTotalBal}/>;\n    puzzleTileTokenRows = [];\n    for (var i = 0; i < sceneDesc.tilesPerPuzzle; i++) {\n      puzzleTileTokenRows.push(\n        <Tile type=\"tile\" id={tileTokenStart+i} key={tileTokenStart+i}\n              count={sceneDesc.tileTokenBalances[tileTokenOffset + i]}\n              total={sceneDesc.tileTokenTotalBalances[tileTokenOffset + i]} />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Home-main\">\n      {sceneLoading && \n        <h3>Scene {sceneId} loading ...</h3>}\n      {!sceneLoading && \n        <h3>\n          Scene \n          <span onClick={prevScene}>&lt;</span>\n          {sceneId}\n          <span onClick={nextScene}>&gt;</span>\n          <span className=\"spacer\" />\n          Puzzle\n          <span onClick={prevPuzzle}>&lt;</span>\n          {puzzleId+1}\n          <span onClick={nextPuzzle}>&gt;</span>\n          <span className=\"spacer\" />\n          {isRedeemable && <span onClick={()=>{solvePuzzle(sceneId, puzzleId);}}>Solve Puzzle</span>}\n          <span className=\"spacer\" />\n          {puzzleName} \n          <span className=\"spacer\"></span>\n          {isRenameable && <span onClick={()=>{renamePuzzle(sceneId, puzzleId, \"foobar\");}}>RENAME ({puzzleNamingCost})</span>}\n        </h3>}\n      \n      {!sceneLoading && \n        <div>\n          <canvas ref={canvasRef} className=\"canvas\" width=\"1920\" height=\"1080\">\n            Blocks: art on the blockchain.\n          </canvas>\n          <div className=\"token-table\">\n            <div className=\"th underline\">\n              <div></div>\n              <div>Balance</div>\n              <div>Supply</div>\n              <div>Token ID</div>\n            </div>\n            {puzzleTokenRow}\n            {puzzleTileTokenRows}\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default PuzzleViewer;\n  ","import React, {useState} from \"react\";\n\nimport {packImgUri, packGifUri, getAllSceneSaleInfo, getSceneSaleInfo } from \"./contractHelpers.js\";\n\nvar Web3 = require(\"web3\");\n\nconst TileStore = (props) => {\n  const [isLoading, setLoading] = useState(true);\n  const [scenes, setScenes] = useState([]);\n\n  const updateSceneInfo = async (sidx) => {\n    let desc = await getSceneSaleInfo(props.estile, props.user, sidx);\n    let found = false;\n    let _scenes = scenes.map((sdesc) => {\n      if (sdesc.sceneId === desc.sceneId) {\n        found = true;\n        return desc;\n      }\n      return sdesc;\n    });\n    if (found) {\n      setScenes(_scenes);\n    } else {\n      setScenes(...scenes, desc);\n    }\n  }\n\n  const buyTilesETH = async (sceneId, count=10) => {\n    let cost = Web3.utils.toWei(\"0.02\", \"ether\");\n    await props.estilewrap.buyTilesForETH(sceneId, count, {\n      value: cost * count, \n      from: props.user\n    }).catch((err) => {\n      console.log(\"Something went wrong,\", err);\n    });\n    await updateSceneInfo(sceneId);\n  }\n\n  const buyTilesEscape = async (sceneId, cost, count=1) => {\n    await props.estilewrap.buyTilesForEscape(sceneId, count, {\n      from: props.user\n    }).catch((err) => {\n      console.log(\"Something went wrong,\", err);\n    });\n    await updateSceneInfo(sceneId);\n  }\n  \n  if (props.estile && props.user && props.numScenes && isLoading) {\n    setLoading(false);\n    getAllSceneSaleInfo(props.estile, props.user, props.numScenes.toNumber())\n      .then((_scenes) => {\n        setScenes(_scenes)\n      });\n    return <div>Loading ...</div>;\n  } \n\n  const scenesDOM = scenes.map((scene, i) => {\n    const sceneId = scene.sceneId;\n    return (\n      <div key={sceneId} className=\"TileStore-pack\">\n        <div className=\"col\">\n          <div>scene #{scene.sceneId}</div>\n          <div>{scene.tilesLeft.toString()} tiles left</div>\n        </div>\n        <br></br>\n        <div className=\"pack\">\n          <img className=\"static\" src={packImgUri(sceneId)} alt={sceneId} />\n          <img className=\"active\" src={packGifUri(sceneId)} alt={sceneId} />\n          <div className=\"col\">\n            <div className=\"col\">\n              <div></div>\n              <div className=\"float\">{scene.tilesLeft.toString()} x <span role=\"img\" aria-label=\"puzzle\">🧩</span></div>\n            </div>\n          </div>    \n        </div>\n        <br></br>\n        <div className=\"col\">\n          <div>Buy tiles: </div>\n          <div className=\"button\" onClick={() => {buyTilesEscape(sceneId, 5, 1);}}>{5} ESC</div>\n          {scene.tilesLeft.toNumber() > 0 && \n            <div className=\"button\" onClick={() => {buyTilesETH(sceneId, 10);}}>0.02 ETH</div>}\n        </div>\n        <br></br>\n        {/* {pack.balance <= 0 && <div>You own no packs.</div>}\n        {pack.balance > 0 && \n          <div className=\"col\">\n            <div>x{pack.balance}</div>\n            <div className=\"button\" onClick={()=>{openPack(sceneId, 1);}}>open pack</div>\n            <div className=\"button\" onClick={()=>{openPack(sceneId, pack.balance);}}>open all ({pack.balance})</div>\n          </div>} */}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"TileStore-main\">\n      <br></br>\n      <div className=\"TileStore-list\">\n        {scenesDOM}\n      </div>\n    </div>\n  );\n}\n\nexport default TileStore;","import React from \"react\";\n\nimport TileStore from \"../components/TileStore.js\";\n\nconst Packs = (props) => {\n  return (\n    <div className=\"Packs-main\">\n      <TileStore {...props} />\n    </div>\n  );\n}\n\nexport default Packs;\n  ","import React, {useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {tileDataUri, tileImgUri, prettyfyId, getTokenBalance} from \"../components/contractHelpers.js\";\n\nconst getShardInfo = async (id) => {\n  const tileJSON = tileDataUri(id);\n  const rsp = await fetch(tileJSON); \n  return await rsp.json();\n}\n\nconst Shard = (props) => {\n  console.log(\"SHARD PROPS\");\n  console.log(props);\n  let {id} = useParams();\n  const tokId = parseInt(id, 16);\n  const prettyId = prettyfyId(id);\n  const [desc, setDesc] = useState();\n  const [tokInfo, setTokInfo] = useState();\n\n  if (!desc && props.user && props.estile) {\n    getShardInfo(id)\n      .then(setDesc);\n  }\n  if (!tokInfo && props.user && props.estile) {\n    getTokenBalance(props.estile, props.user, tokId)\n      .then(setTokInfo);\n  }\n  return (\n    <div className=\"Shard-main\">\n      <div className=\"bg\">\n        <img src={tileImgUri(id)} alt={id} />\n      </div>\n      <div className=\"col\">\n        <div>Token ID</div>\n        <div>{prettyId}</div>\n      </div>\n      {desc === undefined && \n        <div>Loading metadata...</div>\n      }\n      {desc && props.estile &&\n        <>\n          <div className=\"col\">\n            <div>Name</div>\n            <div>{desc.name}</div>\n          </div>\n          <a href={\"https://testnets.opensea.io/assets/\"+props.estile.address+\"/\"+tokId}>View in OpenSEA</a>\n        </>\n      }\n      {tokInfo === undefined && \n        <div>Loading balances...</div>\n      }\n      {tokInfo &&\n        <>\n          <div className=\"col\">\n            <div>Your balance</div>\n            <div>{tokInfo.balance.toString()}</div>\n          </div>\n          <div className=\"col\">\n            <div>Total supply</div>\n            <div>{tokInfo.supply.toString()}</div>\n          </div>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default Shard;\n","import React from \"react\";\n\nconst About = () => {\n  return (\n    <div className=\"About-main\">\n      <h3>What are EtherScapes?</h3>\n      <p>\n        EtherScapes is a procedurally generated jig-saw puzzle collectable. \n      </p>\n      <p>\n        Each scene in our collection is broken up into puzzle pictures.\n        Each picture makes up a puzzle broken into JigSaw tiles. The tiles \n        themselves and the solved puzzles are collectable and tradeable on markets\n        like opensea and rarible (they are tradeable ERC1155 tokens).\n      </p>\n\n      <h3>How does it work?</h3>\n      <p>\n        Purchase packs with ETH or ESCAPE tokens. Each pack is associated with a \n        scene and will mint puzzle tiles from the scene at random. \n      </p>\n      <p>\n        Some packs are special and cannot be purchased for ETH at the contract \n        exchange rate.\n      </p>\n      \n      <h3>ESCAPEs? What are these?</h3>\n      <p>\n        ESCAPEs are a tradeable ERC20 token that is minted by the EtherScapes contract\n        anytime a puzzle in a scene is solved. To solve a puzzle, collect and trade-in\n        all tokens for a single picture (this will burn the induvidual tiles!). However,\n        this will also release a fixed percent of the ESCAPE locked up in the scene's \n        reward pool!\n      </p>\n      <p>\n        ESCAPEs can also be used to give each picture in each scene a name of your \n        choosing. To assign a name to a picture, you must have at-least one token \n        that represents the completed picture. Each time a picture is named, the \n        naming cost for the picture doubles.\n      </p>\n\n      <h3>Other market integration</h3>\n      <p>\n        The puzzle packs, the tiles, and the solved puzzles are all tradeable \n        ERC1155 tokens. This means you can sell / trade the packs without ever\n        opening them! Trade tokens with friends to complete pictures and earn \n        ESCAPE!\n      </p>\n    </div>\n  );\n}\n\nexport default About;\n  ","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./Home.js\";\nimport PuzzleViewer from \"./PuzzleViewer.js\";\nimport Packs from \"./Packs.js\";\nimport Shard from \"./Shard.js\";\nimport About from \"./About.js\";\n\n\nconst MainLayout = (props) => {\n  return (\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\n      <Route exact path=\"/\">\n        <Home page=\"Home\" {...props} />\n      </Route>\n      <Route exact path=\"/scene/:sid/puzzle/:pid\">\n        <PuzzleViewer page=\"PuzzleViewer\" {...props} />\n      </Route>\n      <Route exact path=\"/packs\">\n        <Packs page=\"Packs\" {...props} />\n      </Route>\n      <Route exact path=\"/shard/:id\">\n        <Shard page=\"Shard\" {...props} />\n      </Route>\n      <Route exact path=\"/about\">\n        <About></About>\n      </Route>\n      <Route path=\"*\">\n        <h3>Not sure what you are looking for ... 404!</h3>\n      </Route>\n    </Switch>\n  );\n}\n  \nexport default MainLayout;","/*\n *  Entry-point for the RedVsBlue application.\n */\n\n// React and associated components.\nimport React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport Web3 from \"web3\";\n\nimport MainLayout from \"./pages/MainLayout.js\";\n\n// Contract ABIs.\nimport _EscapeToken from \"./contract/EscapeToken.json\";\nimport _ESTile from \"./contract/ESTile.json\";\nimport _ESTileWrapper from \"./contract/ESTileWrapper.json\";\nimport _NamingContract from \"./contract/NamingContract.json\";\n\n\nimport \"./App.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n  // App constructor - sets up default state.\n  constructor(props) {\n    super(props);\n      \n    this.updateAccounts = this.updateAccounts.bind(this);\n\n    this.web3 = null;\n    this.contracts = {};\n    this.contracts_abi = {};\n    this.accounts = [];\n\n    this.state = {\n      // Number of ESCAPE credit balance for user.\n      escapeBalance: 0,\n      escapeClaimable: 0,\n\n      // Total scene info stuff.\n      numScenes: 0,\n\n      // Number of solved puzzle tokens.\n      numClaims: 0,\n\n      escape: undefined,\n      namer: undefined,\n      estile: undefined,\n      estilewrap: undefined,\n    };\n  }\n\n  // mounted ::\n  componentDidMount() {\n    return this.initWeb3();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Helpers.\n  ////////////////////////////////////////////////////////////////////////////\n\n  resolve_promise = (f, args=[]) => {\n    return new Promise((resolve, reject) => {\n      f(...args, (err, result) => {\n        if (err !== null) reject(err);\n        else resolve(result);\n      });\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Contract basics.\n  ////////////////////////////////////////////////////////////////////////////\n\n  initWeb3 = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        this.updateAccounts(accounts);\n        window.ethereum.on(\"accountsChanged\", this.updateAccounts);\n        window.ethereum.enable();\n      } catch (err) {\n        console.log(\"User denied web3 account access\");\n        return;\n      }\n      this.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.error(\"No web3 provider detected!\");\n      return;\n    }\n\n    return this.instantiateContracts();\n  }\n\n  updateAccounts = async (accounts) => {\n    const firstTime = !(this.accounts && this.accounts[0]);\n    this.accounts = accounts || await this.web3.eth.getAccounts();\n    if (!firstTime) {\n      this.updateApp();\n    }\n  }\n\n\n\n  claimReward = async () => {\n    return await this.state.estile.claimReward({from: this.accounts[0]});\n  }\n\n  instantiateContracts = async () => {\n    const contract = require(\"@truffle/contract\");\n    const user = this.accounts[0];\n    \n    this.contracts_abi.EscapeToken = contract(_EscapeToken);\n    this.contracts_abi.ESTile = contract(_ESTile);\n    this.contracts_abi.ESTileWrapper = contract(_ESTileWrapper);\n    this.contracts_abi.NamingContract = contract(_NamingContract);\n\n    this.contracts_abi.EscapeToken.setProvider(window.web3.currentProvider);\n    this.contracts_abi.ESTile.setProvider(window.web3.currentProvider);\n    this.contracts_abi.ESTileWrapper.setProvider(window.web3.currentProvider);\n    this.contracts_abi.NamingContract.setProvider(window.web3.currentProvider);\n\n    let escape = await this.contracts_abi.EscapeToken.deployed();\n    let estile = await this.contracts_abi.ESTile.deployed();\n    let estilewrap = await this.contracts_abi.ESTileWrapper.deployed();\n    let namer = await this.contracts_abi.NamingContract.deployed();\n\n    await this.subscribeToEvents(estile);    \n\n    let escapeBalance = await escape.balanceOf(user);\n    let escapeClaimable = await estile.getClaimInfo({from: user});\n    let numClaims = await estile.claimLength(user);\n    \n    /*\n     *  Now we need to figure how many scenes there are and how many puzzles \n     *  in each scene. If we have tokens that correspond to a scene, we list \n     *  them here.\n     */\n    let numScenes = await estile.sceneCount();\n\n    /*\n     *  Update app state!\n     */\n    this.setState({\n      numClaims: numClaims,\n      numScenes: numScenes,\n      escapeBalance: escapeBalance,\n      escapeClaimable: escapeClaimable,\n\n      escape: escape,\n      estile: estile,\n      estilewrap: estilewrap,\n      namer: namer,\n    });\n  }\n\n  subscribeToEvents = async (estile) => {\n    console.log(\"subscribe...\");\n    estile.allEvents()\n      .on(\"data\", (e) => {\n        console.log(e);\n      })\n      .on(\"error\", (err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Accounts and other web3.eth stuff.\n  ////////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Round updates for totals, percentages UI etc as well as refresh logic.\n  ////////////////////////////////////////////////////////////////////////////\n\n  updateApp = async() => {    \n    // console.log(\"Account0      = \", this.accounts[0]);\n    // console.log(\"EscapeToken   = \", this.contracts[\"EscapeToken\"].address);\n    // console.log(\"ESTile        = \", this.contracts[\"ESTile\"].address);\n    // console.log(\"ESTileWrapper = \", this.contracts[\"ESTileWrapper\"].address);\n    this.setState({\n      // TODO\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Contract interaction.\n  ////////////////////////////////////////////////////////////////////////////\n  \n  ////////////////////////////////////////////////////////////////////////////\n  // User Interaction.\n  ////////////////////////////////////////////////////////////////////////////\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <NavLink exact activeClassName=\"isActive\" to=\"/\">EtherScapes</NavLink>\n          <NavLink exact activeClassName=\"isActive\" to=\"/packs\">Packs</NavLink>\n          <NavLink exact activeClassName=\"isActive\" to=\"/about\">About</NavLink>\n          <div className=\"grow\"></div>\n          <div className=\"balance\">{this.state.escapeBalance.toString()} ESC</div>\n          <div className=\"balance\" onClick={()=> {this.claimReward()}}>({this.state.escapeClaimable.toString()}, +{this.state.numClaims.toString()} per day)</div>\n        </div>\n        <div className=\"App-body\">\n          <MainLayout \n            balance={this.state.escapeBalance}\n            claim={this.state.escapeClaimable}\n            numScenes={this.state.numScenes}\n            numPacks={this.state.numPacks}\n            escape={this.state.escape}\n            estile={this.state.estile}\n            namer={this.state.namer}\n            estilewrap={this.state.estilewrap} \n            user={this.accounts[0]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById(\"root\"));\n\nregisterServiceWorker();\n"],"sourceRoot":""}