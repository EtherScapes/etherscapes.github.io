{"version":3,"sources":["components/Loading.js","components/contractHelpers.js","pages/Shard.js","components/Overlays.js","components/ProgressBar.js","components/PageInfoPanel.js","pages/PuzzleViewer.js","components/TileStore.js","pages/Packs.js","pages/About.js","pages/MainLayout.js","components/Footer.js","components/Connectors.ts","App.js","components/Hooks.ts","registerServiceWorker.js","index.js","svg/buy.svg","svg/opensea-logo.svg","svg/collect.svg","svg/puzzle.svg","svg/salary.svg","svg/reddit.svg","svg/discord.svg","svg/github.svg","svg/twitter.svg"],"names":["Loading","props","className","message","length","prettyfyId","strId","s","zs","ze","i","lenLeft","nftId","id","toString","padStart","tileImgUri","useBW","tileDataUri","getAllSceneInfo","estile","user","numScenes","a","scenes","sidx","getSceneInfo","push","getTokenBalance","tokenId","balanceOf","_b","totalSupply","_t","balance","supply","sceneId","tokenRangeForScene","_tokRange","tilesPerPuzzle","toNumber","numPuzzles","numTiles","sceneShardInfo","_tileInfo","start_tile_range","end_puzzle_range","start_puzzle_range","end_tile_range","tileTokenStart","tileTokenEnd","puzzleTokenStart","puzzleTokenEnd","maxTiles","Web3","utils","toBN","tilesLeft","ethCost","escCost","getShardInfo","tileJSON","fetch","rsp","json","ShardInner","prettyId","useState","desc","setDesc","tokInfo","setTokInfo","then","name","src","alt","description","target","rel","href","address","OpenSeaLogo","Shard","useParams","intId","parseInt","require","Modal","ReactDOM","createPortal","onClick","doClose","e","stopPropagation","children","document","querySelector","useInput","type","def","value","setValue","onChange","useEscapeKey","onEscape","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","BuyTilesModal","numToBuy","numToBuyInput","isTxPending","setTxPending","undefined","tx","setTx","err","setErr","buyTilesETH","cost","toWei","estilewrap","buyTilesForETH","from","catch","updateSceneInfo","buyTilesEscape","buyTilesForEscape","closeModal","close","ethTileCost","escTileCost","bnNumToBuy","ethCostWei","mul","fromWei","ShardPreviewModal","ProgressBar","total","count","barStyle","width","height","marginLeft","marginRight","marginTop","background","display","justifyContent","border","progressStyle","style","alignItems","position","fontSize","left","top","ConnectWallet","connect","PageInfoPanel","error","activating","connected","connectWallet","active","contractsLoaded","errMsg","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","console","Tile","chainId","updateFn","setBalance","setTotal","result","preview","PuzzleViewer","history","useHistory","sid","pid","namer","puzzleId","sceneLoading","setSceneLoading","sceneDesc","setSceneDesc","buyTilesForSceneId","setBuyTilesForSceneId","previewTokenId","setPreviewTokenId","ownedTokens","setOwnedTokens","updateOwnedTokens","useCallback","tdesc","found","_owned","map","odesc","canvasRef","useRef","puzzleToken","setPuzzleToken","updatePuzzleToken","current","hasBackground","ownsSolvedToken","draw","context","ptok","canvas","img","Image","onload","drawImage","drawnTokens","tok","tileMeta","timg","th","attributes","tw","ty","this","image","puzzleNamer","setPuzzleNamer","puzzleName","setPuzzleName","showPuzzleNaming","setShowPuzzleNaming","puzzleNamingCost","setPuzzleNamingCost","newPuzzleName","newPuzzleNameInput","refreshPuzzleNameInfo","getScenePuzzleInfo","solvePuzzle","redeemPuzzle","renamePuzzle","nameScenePuzzle","updateNamingInfo","getContext","gotoScene","_sid","_pid","prevSceneClass","nextSceneClass","prevPuzzleClass","nextPuzzleClass","puzzleTokenRow","setPuzzleTokenRow","puzzleTileTokenRows","setPuzzleTileTokenRows","puzzleTokenId","tileTokenOffset","key","tileRows","scene","uniqueTokensOwned","reduce","tokenDesc","flexGrow","ref","data-tip","data-for","arrowColor","place","BuySVG","TileStore","isLoading","setLoading","setScenes","_scenes","sdesc","scenesDOM","np","randomPuzzle","Math","floor","random","costInEther","newRiftComingSoon","Packs","showTip","setShowTip","role","aria-label","data-effect","data-place","CollectSVG","SolveSVG","EarnSVG","FAQSection","open","show","setShow","glyph","question","About","maxWidth","margin","textAlign","padding","Redirect","to","MainLayout","exact","path","page","Footer","RedditSVG","DiscordSVG","TwitterSVG","GitHubSVG","injected","InjectedConnector","supportedChainIds","App","acct","size","useWeb3React","connector","account","activate","network","getNetwork","networkName","prettyAddress","substring","React","activatingConnector","setActivatingConnector","suppress","ethereum","on","handleConnect","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","useEagerConnect","setContractsLoaded","escapeBalance","setEscapeBalance","escapeClaimable","setEscapeClaimable","setNumScenes","numClaims","setNumClaims","escape","setEscape","setNamer","setESTile","setESTileWrap","claimReward","contract","EscapeTokenABI","_EscapeToken","ESTileABI","_ESTile","ESTileWrapperABI","_ESTileWrapper","NamingContractABI","_NamingContract","setProvider","web3","currentProvider","deployed","cEscape","cESTile","cESTileWrap","cNamer","setupContracts","getClaimInfo","claimLength","sceneCount","allEvents","setupBalances","connectInjectedWallet","activeClassName","claim","marginBottom","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","render","getLibrary","provider","library","Web3Provider","pollingInterval","getElementById","URL","process","origin","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.9c9683c2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loading.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const Loading = (props) => {\n  return (\n    <div className=\"App-loading\">\n      <div className=\"message\">{props.message}</div>\n      {props.message && props.message.length > 0 &&\n        <div className=\"loading-animation\">\n          <div></div><div></div><div></div>\n        </div>\n      }\n    </div>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////","import Web3 from \"web3\";\n\nexport const prettyfyId = (strId) => {\n  let s = \"0x\";\n  let zs = strId.length;\n  let ze = 0;\n  for (var i = 0; i < strId.length; i++) {\n    if (strId[i] === '0' && i < zs) zs = i;\n    if (strId[i] === '0' && i > ze) ze = i;\n  }\n  if (zs < 4) zs = 4;\n  let lenLeft = 64 - ze;\n  if (lenLeft < 5) {\n    ze -= (5 - lenLeft);\n  }\n  for (i = 0; i < strId.length; i++) {\n    if (i === zs) { s += \"...\"; }\n    if (i <= ze && i >= zs) continue;\n    s += strId[i];\n  }\n  return s;\n}\n\nexport const nftId = (id) => {\n  return id.toString(16).padStart(64, 0);\n}\n\nexport const tileImgUri = (id, useBW=false) => {\n  if (useBW) {\n    return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\"_bw.png\"\n  }\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".png\";\n}\n\nexport const tileDataUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".json\";\n}\n\nexport const packImgUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/pack/\"+nftId(id)+\".png\";\n}\n\nexport const packGifUri = () => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.gif\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getAllSceneInfo = async (estile, user, numScenes) => {\n  /*\n   *  All pack token ids start at 1, query stats for each one so we know how \n   *  many are left, if they can be purchased and our personal count for them.\n   * \n   *  The `TileStore` component is how we open / purchase / see our packs.\n   */\n  let scenes = [];\n  for (var sidx = 1; sidx <= numScenes; sidx++) {\n    scenes.push(await getSceneInfo(estile, user, sidx));\n  }\n  return scenes;\n}\n\n\nexport const getAllSceneSaleInfo = async (estile, user, numScenes) => {\n    /*\n     *  All pack token ids start at 1, query stats for each one so we know how \n     *  many are left, if they can be purchased and our personal count for them.\n     * \n     *  The `TileStore` component is how we open / purchase / see our scenes.\n     */\n    let scenes = [];\n    for (var sidx = 1; sidx <= numScenes; sidx++) {\n      scenes.push(await getSceneSaleInfo(estile, user, sidx));\n    }\n    return scenes;\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getTokenBalance = async (estile, user, tokenId) => {\n  const _b = await estile.balanceOf(user, tokenId);\n  const _t = await estile.totalSupply(tokenId);\n  return {\n    balance: _b,\n    supply: _t,\n  }\n}\n\n/*\n *  Load scene will fetch a scene and all its tokens (tiles + puzzles)\n *  and compute their balances so that the renderer can fetch the needed\n *  metadata and render our website correctly.\n */\nexport const getSceneInfo = async (estile, user, sceneId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n  const _tileInfo = await estile.sceneShardInfo(sceneId);\n  \n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber();\n  const end_tile_range = start_tile_range + numTiles - 1;\n  const start_puzzle_range = end_tile_range + 1;\n  const end_puzzle_range = start_puzzle_range + numPuzzles - 1;\n\n  return {\n    sceneId: sceneId,\n    tileTokenStart: start_tile_range,\n    tileTokenEnd: end_tile_range,\n    puzzleTokenStart: start_puzzle_range,\n    puzzleTokenEnd: end_puzzle_range,\n    numTiles: numTiles,\n    maxTiles: Web3.utils.toBN(sceneId === 1 ? \"1200\" : \"0\"),\n    tilesLeft: _tileInfo[0],\n    ethCost: _tileInfo[1],\n    escCost: _tileInfo[2],\n    numPuzzles: numPuzzles,\n    tilesPerPuzzle: tilesPerPuzzle,\n  };\n}\n\nexport const getPuzzleTokensAndBalances = async (estile, user, sceneId, puzzleId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n\n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber() + (puzzleId * tilesPerPuzzle);\n  const end_tile_range = start_tile_range + tilesPerPuzzle - 1;\n  const puzzleToken = start_tile_range + (numTiles);\n  \n  let tileTokenBalances = [];\n  let tileTokenTotalBalances = [];\n  for (var ttok = start_tile_range; ttok <= end_tile_range; ttok++) {\n    const tokInfo = await getTokenBalance(estile, user, ttok);\n    tileTokenBalances.push(tokInfo.balance.toNumber());\n    tileTokenTotalBalances.push(tokInfo.supply.toNumber());\n  }\n  \n  let puzzleTokenBalance;\n  let puzzleTokenTotalBalance;\n  const tokInfo = await getTokenBalance(estile, user, puzzleToken);\n  puzzleTokenBalance = tokInfo.balance.toNumber();\n  puzzleTokenTotalBalance = tokInfo.supply.toNumber();\n  let canRedeem = true;\n  for (var i = 0; i < tilesPerPuzzle; i++) {\n    if (tileTokenBalances[i] <= 0) canRedeem = false;\n  }\n\n  return {\n    sceneId: sceneId,\n    tileTokenBalances: tileTokenBalances,\n    tileTokenTotalBalances: tileTokenTotalBalances,\n    puzzleTokenBalance: puzzleTokenBalance,\n    puzzleTokenTotalBalance: puzzleTokenTotalBalance,\n    puzzleRedeemable: canRedeem,\n  };\n}\n\nexport const getSceneSaleInfo = async (estile, user, sceneId) => {\n    const _tokRange = await estile.tokenRangeForScene(sceneId);\n    const tilesPerPuzzle = _tokRange[1];\n    const numPuzzles = _tokRange[2];\n    const tilesLeft = await estile.sceneShardInfo(sceneId);\n  \n    return {\n      sceneId: sceneId,\n      tilesLeft: tilesLeft,\n      numPuzzles: numPuzzles,\n      tilesPerPuzzle: tilesPerPuzzle,\n    };\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n","import React, {useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {Loading} from \"../components/Loading.js\";\nimport {tileDataUri, tileImgUri, nftId, prettyfyId, getTokenBalance} from \"../components/contractHelpers.js\";\n\nimport OpenSeaLogo from '../svg/opensea-logo.svg';\n\nconst getShardInfo = async (id) => {\n  const tileJSON = tileDataUri(id);\n  const rsp = await fetch(tileJSON); \n  return await rsp.json();\n}\n\nexport const ShardInner = (props) => {\n  const prettyId = prettyfyId(nftId(props.id));\n  const [desc, setDesc] = useState();\n  const [tokInfo, setTokInfo] = useState();\n\n  if (!desc && props.user && props.estile) {\n    getShardInfo(props.id)\n      .then(setDesc);\n  }\n  if (!tokInfo && props.user && props.estile) {\n    getTokenBalance(props.estile, props.user, props.id)\n      .then(setTokInfo);\n  }\n\n  if (!desc || !tokInfo) {\n    return (\n      <div className=\"Shard-main\">\n        <Loading message=\"Fetching token details\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"shard-main\">\n      <div className=\"shard-header\">\n        {desc.name}\n        <span className=\"grow\" />\n      </div>\n      <div className=\"bg\">\n        <img src={tileImgUri(props.id)} alt={props.id} />\n      </div>\n      <p>{desc.description}</p>\n      <p>The NFT id for this shard is {prettyId}.</p>\n      {tokInfo.supply.toNumber() > 0 && <>\n        <p>There are currently {tokInfo.supply.toString()} of these tokens in existence, and you own {tokInfo.balance.toString()} of them!</p>\n        <div className=\"social-link\">\n          <div>View this NFT on: </div>\n          <div>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://opensea.io/assets/\"+props.estile.address+\"/\"+props.id}>\n              <img src={OpenSeaLogo} alt=\"OpenSea\" /><span>OpenSea</span>\n            </a>\n          </div>\n        </div>\n      </>}\n      {tokInfo.supply.toNumber() === 0 && <>\n        <p>There are no copies of this token in existence! Once minted, it will be visible for trade on OpenSea etc.</p>\n      </>}\n    </div>\n  );\n}\n\n/*\n *  If we end up rendering shards as a separate page, use this component to \n *  wrap the `ShardInner` and parse the hex string etc from the URL params.\n */\nexport const Shard = (props) => {\n  let {id} = useParams();\n  const intId = parseInt(id, 16);\n  return (\n    <div className=\"shard-page\">\n      <ShardInner {...props} id={intId} />\n    </div>\n  );\n}\n\nexport default Shard;","import React, {useState, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {ShardInner} from \"../pages/Shard.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar Web3 = require(\"web3\");\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const Modal = (props) => {\n  return ReactDOM.createPortal(\n    <div className=\"modal\" onClick={()=>{props.doClose && props.doClose()}}>\n      <div className=\"modal-body\" onClick={(e)=>{e.stopPropagation()}}>\n        {props.children}\n      </div>\n    </div>,\n    document.querySelector(\"#modal\"));\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const useInput = (type, def) => {\n  const [value, setValue] = useState(def);\n  const input = <input value={value} \n                        onChange={e => setValue(e.target.value)} \n                        type={type} />;\n  return [value, input];\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const useEscapeKey = (onEscape) => {\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) \n        onEscape();\n      };\n      window.addEventListener(\"keydown\", handleEsc);\n\n      return () => {\n        window.removeEventListener(\"keydown\", handleEsc);\n      };\n    }, [onEscape]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const BuyTilesModal = (props) => {\n  const [numToBuy, numToBuyInput] = useInput(\"number\", 1);\n  const [isTxPending, setTxPending] = useState(false);\n  const [tx, setTx] = useState(undefined);\n  const [err, setErr] = useState(undefined);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const buyTilesETH = async () => {\n    setTx(undefined);\n    setTxPending(true);\n\n    let cost = Web3.utils.toWei(\"0.02\", \"ether\");\n    const rsp = await props.estilewrap.buyTilesForETH(props.sceneId, numToBuy, {\n      value: cost * numToBuy, \n      from: props.user\n    }).catch((err) => {\n      setErr(err)\n    });\n\n    if (rsp) {\n      setTx(rsp.tx);\n      setTxPending(false);\n      props.updateSceneInfo(props.sceneId);\n    }\n  }\n\n  const buyTilesEscape = async () => {\n    setTx(undefined);\n    setTxPending(true);\n\n    const rsp = await props.estilewrap.buyTilesForEscape(props.sceneId, numToBuy, {\n      from: props.user\n    }).catch((err) => {\n      setErr(err);\n    });\n\n    if (rsp) {\n      setTx(rsp.tx);\n      setTxPending(false);\n      props.updateSceneInfo(props.sceneId);\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n  \n  const closeModal = () => {\n    setErr(undefined);\n    setTxPending(false);\n    setTx(undefined);\n    props.close();\n  }\n\n  useEscapeKey(() => closeModal());\n  \n  const ethTileCost = toBN(Web3.utils.toWei(\"0.02\", \"ether\").toString());\n  const escTileCost = toBN(Web3.utils.toWei(\"5\", \"wei\").toString());\n  const bnNumToBuy = toBN(numToBuy.toString());\n  const ethCostWei = ethTileCost.mul(bnNumToBuy);\n  const escCost = (escTileCost.mul(bnNumToBuy)).toString();\n  const ethCost = Web3.utils.fromWei(ethCostWei, \"ether\").toString();\n\n  return (\n    <>\n      {props.sceneId > 0 &&\n        <Modal doClose={()=>{closeModal()}}>\n          <div className=\"tilestore-modal\">\n            <h1>Buying tiles for rift {props.sceneId}</h1>\n            <br></br>\n            {!isTxPending && !tx && \n              <>\n                <div className=\"col\">\n                  <div>Number of shards to purchase:</div>\n                </div>\n                <div className=\"col input-div\">\n                  {numToBuyInput}\n                </div>\n              </>}\n              {isTxPending && !tx &&\n                <div className=\"col\">\n                  <div>Transaction pending ...</div>\n                </div>\n              }\n              {!isTxPending && tx && \n                <div className=\"col\">\n                  <div><a className=\"clickable\" href={\"https://etherscan.io/tx/\"+tx}>view tx etherscan</a></div>\n                </div>\n              }\n              <>\n                <br></br>\n                <div className=\"col\">\n                  {!isTxPending && !tx && <>\n                    <div className=\"clickable\" onClick={() => {buyTilesEscape();}}>Use {escCost} ESC</div>\n                    <span className=\"spacer\"></span>\n                    <div className=\"clickable\" onClick={() => {buyTilesETH();}}>Use {ethCost} ETH</div>\n                  </>}\n                  {err &&\n                    <div className=\"col\">\n                      <div>Uh oh, thats an error ...</div>\n                    </div>\n                  }\n                  <div className=\"grow\"></div>\n                  <div className=\"clickable\" onClick={() => {closeModal()}}>CLOSE</div>\n                </div>\n              </>\n          </div>\n        </Modal>\n      }\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const ShardPreviewModal = (props) => {\n  \n  useEscapeKey(() => props.close());\n\n  return (\n    <>\n      {props.tokenId > 0 &&\n        <Modal>\n          <div className=\"tilestore-modal\">\n            <ShardInner {...props} id={props.tokenId} />\n            <br></br>\n            <div className=\"col\">\n              <div className=\"grow\"></div>\n              <div className=\"clickable\" onClick={() => {props.close()}}>CLOSE</div>\n            </div>\n          </div>\n        </Modal>\n      }\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////","import React from \"react\";\n\nexport const ProgressBar = (props) => {\n  if (!props.total) return (<>...</>);\n  const count = props.count || 0;\n  const barStyle = {\n    width: props.width || \"120px\",\n    height: props.height || \"24px\",\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n    marginTop: \"4px\",\n    background: \"black\",\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    border: \"1px solid var(--color-background)\",\n  };\n  const progressStyle = {\n    background: \"var(--color-special)\",\n    border: \"1px solid var(--color-font)\",\n    width: (100*(count / props.total))+\"%\",\n  };\n  const statusStyle = {\n    height: \"24px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"10pt\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"5px\",\n  };\n  const containerStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n  }\n\n  return (\n    <div className=\"progressbar-container\" style={containerStyle}>\n      <div className=\"progressbar\" style={barStyle}>\n        <div className=\"progress\" style={progressStyle}>\n        </div>\n      </div>\n      <div className=\"status\" style={statusStyle}>\n        {count} / {props.total}\n      </div>\n    </div>\n  )\n}","\nimport React from \"react\";\n\nimport {Loading} from \"./Loading.js\";\n\nimport { UnsupportedChainIdError } from \"@web3-react/core\"\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from \"@web3-react/injected-connector\"\n\nconst decodeError = (err) => {\n  if (err instanceof NoEthereumProviderError) {\n    return \"No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.\"\n  } else if (err instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (err instanceof UserRejectedRequestErrorInjected) {\n    return \"Please authorize this website to access your Ethereum account.\"\n  } else if (err !== undefined) {\n    console.error(err)\n    return \"An unknown error occurred. Check the console for more details.\"\n  }\n  return undefined;\n}\n\nexport const ConnectWallet = (props) => {\n  return (\n    <div className=\"info\">\n      <p onClick={()=>{props.connect()}}>Connect your metamask wallet to continue.</p>\n      <p>Check out our <a className=\"clickable\" href=\"/#/about\">FAQ</a> to learn more.</p>\n  </div>\n  )\n}\n\nexport const PageInfoPanel = (props) => {\n  const {error, activating, connected, connectWallet, active, contractsLoaded} = props;\n  const errMsg = decodeError(error);\n  return (\n    <div className=\"info-main\">\n      {error && errMsg && \n        <div className=\"err\">\n          {errMsg}\n        </div>\n      }\n      {!activating && !connected && \n        <ConnectWallet connect={connectWallet} />\n      }\n      {activating && !connected && \n        <Loading message=\"Connecting to wallet\" />\n      }\n      {active && connected && !contractsLoaded && \n        <Loading message=\"Loading contracts\" />\n      }\n    </div>\n  )\n}","import React, {useState, useRef, useEffect, useCallback} from \"react\";\nimport { useParams } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport {Loading} from \"../components/Loading.js\";\nimport {useInput} from \"../components/Overlays.js\";\nimport {ProgressBar} from \"../components/ProgressBar.js\";\nimport {getSceneInfo, getTokenBalance, nftId, prettyfyId, tileImgUri, tileDataUri} from \"../components/contractHelpers.js\";\nimport {BuyTilesModal, ShardPreviewModal} from \"../components/Overlays.js\";\nimport {PageInfoPanel} from \"../components/PageInfoPanel.js\";\n\nimport BuySVG from \"../svg/buy.svg\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst Tile = (props) => {\n  const {estile, user, chainId, id, type, updateFn} = props;\n  const [balance, setBalance] = useState(\"...\");\n  const [total, setTotal] = useState(\"...\");\n\n  // When the contract, user or tile id change, update its balance etc.\n  useEffect(() => {\n    getTokenBalance(estile, user, id)\n      .then((result) => {\n        setBalance(result.balance);\n        setTotal(result.supply);\n        if (updateFn) { \n          updateFn(id, {\n            id: id, \n            balance: result.balance,\n            total: result.supply,\n          });\n        }\n      });\n    }, [estile, chainId, user, id, updateFn, setBalance, setTotal]);\n\n  return (\n    <div className=\"th shard-row\" onClick={()=>{props.preview(id)}}>\n      <div><img src={tileImgUri(id)} alt=\"\" width=\"42px\" height=\"auto\"></img> ({type})</div>\n      <div>{balance.toString()}</div>\n      <div>{total.toString()}</div>\n      <div>{prettyfyId(nftId(id))}</div>\n    </div>\n  );\n}\n////////////////////////////////////////////////////////////////////////////////\n\nconst PuzzleViewer = (props) => {\n  let history = useHistory();\n  let {sid, pid} = useParams();\n  const {namer, estile, user} = props;\n\n  const sceneId = sid;\n  const puzzleId = parseInt(pid) - 1; // 0-based\n  const [sceneLoading, setSceneLoading] = useState(true);\n  const [sceneDesc, setSceneDesc] = useState({});\n  const [buyTilesForSceneId, setBuyTilesForSceneId] = useState(0);\n  const [previewTokenId, setPreviewTokenId] = useState(0);\n\n  const [ownedTokens, setOwnedTokens] = useState([]);\n  const updateOwnedTokens = useCallback((id, tdesc) => {\n    let found = false;\n    const _owned = ownedTokens.map((odesc) => {\n      if (odesc.id === tdesc.id) {\n        found = true;\n        return tdesc;\n      } \n      return odesc;\n    });\n    if (found) {\n      setOwnedTokens(_owned);\n    } else {\n      ownedTokens.push(tdesc)\n      setOwnedTokens(ownedTokens);\n    }\n  }, [ownedTokens]);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const canvasRef = useRef(null);\n\n  const [puzzleToken, setPuzzleToken] = useState({});\n  const updatePuzzleToken = useCallback((id, tdesc) => {\n    if (canvasRef.current.hasBackground !== id) canvasRef.current.hasBackground = undefined;\n    setPuzzleToken(tdesc);\n  }, [canvasRef]);\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  const ownsSolvedToken = puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0;\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const draw = useCallback(async (context, reset=false) => {\n    if (sceneDesc.sceneId === undefined) return;\n    const ptok = sceneDesc.puzzleTokenStart + puzzleId;\n    const canvas = canvasRef.current;\n    if (!canvas.hasBackground && puzzleToken.balance !== undefined) {\n      var img = new Image();\n      img.width = 1920;\n      img.height = 1080;\n      img.onload = async () => {\n        context.drawImage(img, 0, 0);\n        canvas.hasBackground = ptok;\n        canvas.drawnTokens = {};\n        draw(context);\n      }\n      img.src = tileImgUri(ptok, ownsSolvedToken === false); // enable bw mode for non owned tokens.\n    }\n    \n    if (canvas.hasBackground) {\n      for (let tok of ownedTokens) {\n        // Tokens with no ownership are not drawn.\n        if (tok.balance.toNumber() === 0) continue;\n\n        // Tokens drawn after a clear are not updated if they have also been drawn.\n        if (tok.id in canvas.drawnTokens) continue;\n        canvas.drawnTokens[tok.id] = true;\n        const tileJSON = tileDataUri(tok.id);\n        const rsp = await fetch(tileJSON); \n        const tileMeta = await rsp.json();\n        \n        var timg = new Image();\n        timg.th = tileMeta.attributes[0][\"value\"];\n        timg.tw = tileMeta.attributes[1][\"value\"];\n        timg.tx = tileMeta.attributes[2][\"value\"];\n        timg.ty = tileMeta.attributes[3][\"value\"];\n        timg.width = timg.tw;\n        timg.height = timg.th; \n        timg.onload = function() {\n          context.drawImage(this, this.tx - this.tw / 2, this.ty - this.th / 2);\n        }\n        timg.src = tileMeta.image; \n      }\n    }\n  }, [sceneDesc, puzzleToken, ownedTokens, ownsSolvedToken, puzzleId]);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const [puzzleNamer, setPuzzleNamer] = useState(\"\");\n  const [puzzleName, setPuzzleName] = useState(\"Unnamed\");\n  const [showPuzzleNaming, setShowPuzzleNaming] = useState(false);\n  const [puzzleNamingCost, setPuzzleNamingCost] = useState(0);\n  const [newPuzzleName, newPuzzleNameInput] = useInput(\"text\", \"\");\n\n  const refreshPuzzleNameInfo = async (sid, pid) => {\n    const result = await namer.getScenePuzzleInfo(sid, pid);\n    setPuzzleNamingCost(result[0].toNumber());\n    if (result[1] === \"\") setPuzzleName(\"Unnamed\");\n    else setPuzzleName(result[1]);\n    setPuzzleNamer(result[2]);\n  }\n\n  const solvePuzzle = async (sid, pid) => {\n    await estile.redeemPuzzle(sid, pid, {from: user});\n  }\n\n  const renamePuzzle = async (sid, pid, name) => {\n    await namer.nameScenePuzzle(sid, pid, name, {from: user});\n    refreshPuzzleNameInfo(sid, pid);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  useEffect(() => {\n    async function updateNamingInfo() {\n      if (!namer) return;\n      const result = await namer.getScenePuzzleInfo(sceneId, puzzleId);\n      setPuzzleNamingCost(result[0].toNumber());\n      if (result[1] === \"\") setPuzzleName(\"Unnamed\");\n      else setPuzzleName(result[1]);\n      setPuzzleNamer(result[2]);\n    }\n    updateNamingInfo();\n  }, [sceneId, puzzleId, namer]);\n\n  // If the user changes, reload the scene.\n  useEffect(() => {\n    setSceneLoading(true);\n  }, [user]);\n\n  useEffect(() => {\n    if (sceneLoading) return;\n    const canvas = canvasRef.current\n    const context = canvas.getContext(\"2d\")\n    draw(context);\n  }, [draw, sceneId, puzzleId, sceneLoading, ownedTokens, puzzleToken, sceneDesc]);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = async (_sid, _pid) => {\n    setShowPuzzleNaming(false);\n    if (_sid !== sceneId) setSceneLoading(true);\n    if (_pid !== puzzleId) setOwnedTokens([]); // reset - ing puzzles.\n    history.push(\"/scene/\" + _sid + \"/puzzle/\" + (_pid+1));\n  }\n  const prevScene = () => { if (sceneId > 1) gotoScene(sceneId - 1, 0); }\n  const nextScene = () => { if (sceneId < props.numScenes.toNumber()) gotoScene(sceneId + 1, 0); }\n  const prevPuzzle = () => { if (puzzleId > 0) gotoScene(sceneId, puzzleId - 1); }\n  const nextPuzzle = () => { if (puzzleId < sceneDesc.numPuzzles - 1) gotoScene(sceneId, puzzleId + 1); }\n  \n  const prevSceneClass = (sceneId > 1) ? \"clickable\" : \"invalid\";\n  const nextSceneClass = (props.numScenes && (sceneId < props.numScenes.toNumber()) ? \"clickable\" : \"invalid\") || \"invalid\";\n  const prevPuzzleClass = (puzzleId > 0) ? \"clickable\" : \"invalid\";\n  const nextPuzzleClass = (puzzleId < sceneDesc.numPuzzles - 1) ? \"clickable\" : \"invalid\";\n\n  //////////////////////////////////////////////////////////////////////////////\n  \n  const [puzzleTokenRow, setPuzzleTokenRow] = useState(<></>);\n  const [puzzleTileTokenRows, setPuzzleTileTokenRows] = useState(<></>);\n  \n  // Anytime the puzzle or scene change, update the tile table.\n  useEffect(() => {\n    if (sceneLoading) return;\n    const puzzleTokenId = sceneDesc.puzzleTokenStart + puzzleId;\n    const tileTokenOffset = puzzleId * sceneDesc.tilesPerPuzzle\n    const tileTokenStart = sceneDesc.tileTokenStart + tileTokenOffset;\n    \n    setPuzzleTokenRow(<Tile {...props} \n                          updateFn={updatePuzzleToken}\n                          preview={(id) => {setPreviewTokenId(id)}}\n                          type=\"puzzle\" id={puzzleTokenId} \n                          key={puzzleTokenId} />);\n    let tileRows = [];\n    for (var i = 0; i < sceneDesc.tilesPerPuzzle; i++) {\n      tileRows.push(\n        <Tile {...props} \n              preview={(id) => {setPreviewTokenId(id)}}\n              updateFn={updateOwnedTokens} \n              type=\"tile\" id={tileTokenStart+i} key={tileTokenStart+i} />\n      );\n    }\n    setPuzzleTileTokenRows(tileRows);\n  }, [puzzleId, sceneDesc, sceneLoading, props, \n      updateOwnedTokens, updatePuzzleToken]);\n\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (!estile || !user || !namer) {\n    return (\n      <div className=\"Home-main\">\n        <PageInfoPanel {...props} />\n      </div>\n    );\n  }\n\n  if (sceneLoading && props.user && props.estile) {\n    getSceneInfo(props.estile, props.user, sceneId)\n      .then((scene) => {\n        setSceneDesc(scene);\n        setSceneLoading(false);\n      });\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const uniqueTokensOwned = ownedTokens.reduce((count, tokenDesc) => {\n    if (tokenDesc.balance > 0) {\n      return count + 1;\n    }\n    return count;\n  }, 0);\n\n  return (\n    <>\n      <BuyTilesModal\n              {...props} \n              sceneId={buyTilesForSceneId}\n              updateSceneInfo={() => {setSceneLoading(false)}} \n              close={() => {setBuyTilesForSceneId(0)}} />\n      <ShardPreviewModal \n              {...props}\n              tokenId={previewTokenId}\n              close={() => {setPreviewTokenId(0)}} />\n      <div className=\"Home-main\" style={{height: \"100%\", display: \"flex\", flexGrow: \"1\", justifyContent: \"center\"}}>\n        {sceneLoading && <Loading message={\"Scene \"+ sceneId +\" loading \"}/>}\n        {!sceneLoading && \n          <>\n            <div className=\"title\">\n              <span>Scene</span>\n              <span className={prevSceneClass} onClick={prevScene}>&lt;</span>\n              {sceneId}\n              <span className={nextSceneClass} onClick={nextScene}>&gt;</span>\n              <span className=\"spacer\" />\n              Puzzle\n              <span className={prevPuzzleClass} onClick={prevPuzzle}>&lt;</span>\n              {puzzleId+1}\n              <span className={nextPuzzleClass} onClick={nextPuzzle}>&gt;</span>\n              <span className=\"spacer\" />\n              <span className=\"grow\"></span>\n              {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0 &&\n                <span style={{marginRight: \"15px\"}}>solved x{puzzleToken.balance.toString()}</span>\n              }\n            </div>\n\n            <div className=\"puzzle-viewer\">\n              <div className=\"puzzle-name clickable\">\n                <div className=\"grow\" style={{width: \"100%\"}} onClick={()=>{setShowPuzzleNaming(!showPuzzleNaming)}}>\n                  \"{puzzleName}\"\n                </div>\n                {showPuzzleNaming && \n                  <div className=\"puzzle-name-details\">\n                    <div>This puzzle currently costs {puzzleNamingCost} ESCAPE to rename.</div>\n                    <div>The last address to name the puzzle was {puzzleNamer}.</div>\n                    {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0 &&\n                      <div className=\"puzzle-name-input\">\n                        {newPuzzleNameInput} \n                        <div className=\"clickable\" onClick={()=>{renamePuzzle(sceneId, puzzleId, newPuzzleName)}}>Rename puzzle</div>\n                      </div>\n                    }\n                    {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() === 0 &&\n                      <div>You must first solve the puzzle to name it.</div>\n                    }\n                  </div>\n                }\n              </div>\n              <canvas ref={canvasRef} className=\"canvas\" width=\"1920\" height=\"1080\">\n                Blocks: art on the blockchain.\n              </canvas>\n              <div className=\"puzzle-toolbar\">\n                {uniqueTokensOwned < sceneDesc.tilesPerPuzzle &&\n                <>\n                  <ProgressBar \n                    count={uniqueTokensOwned} \n                    total={sceneDesc.tilesPerPuzzle} >\n                  </ProgressBar>\n                  <div style={{marginLeft: \"8px\", fontSize: \"10pt\"}}>\n                    shards collected\n                  </div>\n                </>\n                }\n                {uniqueTokensOwned === sceneDesc.tilesPerPuzzle &&\n                <>\n                  <div className=\"clickable\" style={{marginLeft: \"15px\"}} \n                      onClick={()=>{solvePuzzle(sceneId, puzzleId)}}\n                      data-tip data-for=\"solveTooltip\">\n                    solve puzzle\n                  </div>\n                  <ReactTooltip id=\"solveTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n                    <p>Merge all shards in a puzzle to<br></br> \n                      solve it and mint a rare puzzle<br></br>\n                      token.\n                    </p>\n                  </ReactTooltip>\n                </>\n                }\n                <div className=\"grow\"></div>\n                <div className=\"col clickable\" onClick={()=>{setBuyTilesForSceneId(sceneId)}}>\n                  <img src={BuySVG} alt=\"buy shards\"></img> buy shards\n                </div>\n              </div>\n              <div className=\"token-table\">\n                <div className=\"th underline\">\n                  <div></div>\n                  <div>Balance</div>\n                  <div>Supply</div>\n                  <div>Token ID</div>\n                </div>\n                {puzzleTokenRow}\n                {puzzleTileTokenRows}\n              </div>\n            </div>\n          </>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default PuzzleViewer;\n  ","import React, {useEffect, useState} from \"react\";\nimport { useHistory } from \"react-router\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport {Loading} from \"./Loading.js\";\nimport {packGifUri, getAllSceneInfo, getSceneInfo, tileImgUri } from \"./contractHelpers.js\";\nimport {BuyTilesModal} from \"./Overlays.js\";\n\nimport \"./TileStore.css\";\n\nimport BuySVG from \"../svg/buy.svg\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar Web3 = require(\"web3\");\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst TileStore = (props) => {\n  const {user, estile, numScenes} = props;\n\n  const history = useHistory();\n  const [isLoading, setLoading] = useState(true);\n  const [scenes, setScenes] = useState([]);\n  const [buyTilesForSceneId, setBuyTilesForSceneId] = useState(0);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = (sid, pid) => {\n    history.push(\"/scene/\" + sid + \"/puzzle/\" + (pid+1));\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const updateSceneInfo = async (sidx) => {\n    let desc = await getSceneInfo(estile, user, sidx);\n    let found = false;\n    let _scenes = scenes.map((sdesc) => {\n      if (sdesc.sceneId === desc.sceneId) {\n        found = true;\n        return desc;\n      }\n      return sdesc;\n    });\n    if (found) {\n      setScenes(_scenes);\n    } else {\n      setScenes(...scenes, desc);\n    }\n  }\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  useEffect(() => {\n    if (!estile || !user || !numScenes) return;\n    getAllSceneInfo(estile, user, numScenes.toNumber())\n      .then((_scenes) => {\n        setScenes(_scenes)\n        setLoading(false);\n      });\n  }, [isLoading, estile, user, numScenes]);\n  \n  if (isLoading) {  \n    return (\n      <div className=\"info-main\">\n        <Loading message=\"Loading scenes\" />\n      </div>\n    );\n  } \n\n  //////////////////////////////////////////////////////////////////////////////\n  const scenesDOM = scenes.map((scene, i) => {\n    const np = scene.puzzleTokenEnd - scene.puzzleTokenStart + 1;\n    const randomPuzzle = scene.puzzleTokenStart + Math.floor(Math.random() * np); \n    const sceneId = scene.sceneId;\n    const costInEther = Web3.utils.fromWei(scene.ethCost.toString(), \"ether\");\n    return (\n      <div key={sceneId} className=\"TileStore-pack\">\n        <div className=\"scene-list\">\n          <div className=\"pack-holder\">\n            <div className=\"pack\" \n                 onClick={()=>{gotoScene(1, 0)}}\n                 data-tip data-for=\"packTooltip\">\n              <img className=\"static\" src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.png\" alt={1} />\n              <img className=\"active\" src={packGifUri()} alt={sceneId} />\n              <img className=\"bg\" src={tileImgUri(randomPuzzle)} alt={sceneId} />\n            </div>\n          </div>\n          <div className=\"scene-details\">\n            <div className=\"col\">\n              <div>rift #{scene.sceneId}</div>\n              <div>{scene.tilesLeft.toString()} / {scene.maxTiles.toString()} shards left</div>\n            </div>\n            <div className=\"col\">\n              <div>shard cost:</div>\n              <div>{costInEther} ETH / {scene.escCost.toString()} ESC</div>\n            </div>\n            {scene.tilesLeft.toNumber() > 0 && \n              <div className=\"col\">\n                <div className=\"grow\"></div>\n                <div className=\"buy-tiles clickable\" onClick={()=>{setBuyTilesForSceneId(sceneId)}}>\n                  <img src={BuySVG} alt=\"buy shards\"></img> buy shards\n                </div>\n              </div>\n            }\n            {scene.tilesLeft.toNumber() === 0 && \n              <div>All sold out, trade shards to solve puzzles!</div>\n            }\n            <ReactTooltip id=\"packTooltip\" place=\"bottom\" arrowColor=\"var(--color-font)\" >\n              <div>Explore rift #{sceneId}</div>\n            </ReactTooltip>\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const newRiftComingSoon = (\n    <div key={1} className=\"TileStore-pack\">\n      <div className=\"scene-list\">\n        <div className=\"pack-holder\">\n          <div className=\"pack\">\n            <img className=\"static\" src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.png\" alt={1} />\n            <img className=\"active\" src={packGifUri()} alt={1} />\n            <div className=\"bg\">?</div>\n          </div>\n        </div>\n        <div className=\"scene-details\">\n          <div className=\"col\">\n            <div></div>\n            <div>new rift dropping soon!</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n        <BuyTilesModal\n          {...props} \n          sceneId={buyTilesForSceneId}\n          updateSceneInfo={updateSceneInfo} \n          close={() => {setBuyTilesForSceneId(0)}} />\n        \n        <div className=\"TileStore-list\">\n          <h4>Open rifts</h4>\n          {scenesDOM}\n          {newRiftComingSoon}\n        </div>\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default TileStore;","import React, {useState} from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport TileStore from \"../components/TileStore.js\";\nimport {PageInfoPanel} from \"../components/PageInfoPanel.js\";\n\n\nimport CollectSVG from \"../svg/collect.svg\";\nimport SolveSVG from \"../svg/puzzle.svg\";\nimport EarnSVG from \"../svg/salary.svg\";\n\n\nconst Packs = (props) => {\n  const {active, connected, contractsLoaded, user} = props;\n  const [showTip, setShowTip] = useState(true);\n\n  return (\n    <div className=\"TileStore-main\">\n      <div className=\"tooltips\">\n        <ReactTooltip id=\"infoEscapeTooltip\" arrowColor=\"var(--color-font)\">\n          <p><span role=\"img\" aria-label=\"burn\">🔥</span> Burn ESCAPE (ERC20) for shards from open rifts.</p>\n          <p><span role=\"img\" aria-label=\"burn\">🔥</span> Burn ESCAPE to (re)name solved puzzles.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"infoShardTooltip\" arrowColor=\"var(--color-font)\">\n          <p><span role=\"img\" aria-label=\"tile\">🧩</span> Shards are puzzle pieces from EtherScape rifts.</p>\n          <p><span role=\"img\" aria-label=\"contract\">📰</span> Each shard is a NFT (ERC1155) with limited supply.</p>\n          <p><span role=\"img\" aria-label=\"factory\">🚧</span> Rifts mint random shards until they run out.</p>\n          <p><span role=\"img\" aria-label=\"earn\">💰</span> Trade shard tokens on 3rd party markets.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"infoPuzzleTooltip\" arrowColor=\"var(--color-font)\">\n          <p><span role=\"img\" aria-label=\"tile\">🧩</span> Each rift contains a set number of puzzles to solve.</p>\n          <p><span role=\"img\" aria-label=\"burn\">🔥</span> Burn all shards from a puzzle to solve it.</p>\n          <p><span role=\"img\" aria-label=\"earn\">💰</span> Solved puzzles reward even rarer NFTs and earn 1 ESCAPE per day.</p>\n          <p><span role=\"img\" aria-label=\"earn\">💰</span> Trade completed puzzle tokens on 3rd party markets.</p>\n        </ReactTooltip>\n      </div>\n      <div className=\"Packs-main\">\n        <div className=\"TileStore-blurb\">\n          <div className=\"clickable\" data-tip data-for=\"infoShardTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={CollectSVG} alt=\"collect\" />\n            <div>collect shards</div>\n          </div>\n          <div className=\"clickable\" data-tip data-for=\"infoPuzzleTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={SolveSVG} alt=\"solve\" />\n            <div>solve puzzles</div>\n          </div>\n          <div className=\"clickable\" data-tip data-for=\"infoEscapeTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={EarnSVG} alt=\"earn\" />\n            <div>earn ESCAPE</div>\n          </div>\n        </div>\n        {showTip && \n          <div className=\"TileStore-blurb-tip\">\n            (Hint: Anything <span className=\"clickable\">green</span> can be interacted with.)\n            <span className=\"grow\"></span>\n            <span className=\"clickable\" onClick={() => {setShowTip(false)}}>[x]</span>\n          </div>\n        }\n        <br></br>\n        {!(active && connected && user && contractsLoaded) &&\n          <PageInfoPanel {...props} />\n        }\n        {active && connected && user && contractsLoaded &&\n          <TileStore {...props} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Packs;\n  ","import React, {useState} from \"react\";\n\nconst FAQSection = (props) => {\n  const [show, setShow] = useState(props.open || false);\n  const glyph = show ? \"[-]\" : \"[+]\";\n  return (\n    <div className=\"faq-section\">\n      <div className=\"faq-question\" onClick={() => {setShow(!show)}}>\n        {props.question}\n        <span className=\"grow\"></span>\n        <span style={{marginRight: \"50px\"}} className=\"clickable\">{glyph}</span>\n      </div>\n      {show && <div className=\"faq-body\">{props.children}</div>}\n    </div>\n  );\n}\n\nconst About = () => {\n  return (\n    <div className=\"faq-main\">\n      <FAQSection question=\"What are EtherScapes?\" open={true}>\n        <p>\n          EtherScapes are procedurally generated NFT puzzles. \n        </p>\n        <p>\n          Each rift in our collection is made up puzzle pictures. Each puzzle is \n          made of puzzle shards. Solve puzzles by collecting all the relevant \n          shard pieces and trading them in for a super-rare puzzle NFT. \n        </p>\n        <p>\n          <img style={{maxWidth: \"70%\", margin: \"10px 15%\", border: \"2px solid var(--color-header-alpha)\"}} \n               src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/0000000000000000000000000000000000000000000000000000000000000026.png\" alt=\"rift 1 puzzle\" />\n          <div style={{width: \"100%\", textAlign: \"center\"}}>A puzzle from our very first genesis rift</div>\n        </p>\n        <p>\n          <div style={{display: \"flex\", justifyContent: \"space-around\"}}>\n            <img style={{maxWidth: \"20%\", margin: \"10px 2%\", padding: \"10px\", background: \"#00000030\", border: \"2px solid var(--color-header-alpha)\"}} \n                src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/0000000000000000000000000000000000000000000000000000000000000003.png\" alt=\"rift 1 shard\" />\n            <img style={{maxWidth: \"20%\", margin: \"10px 2%\", padding: \"10px\", background: \"#00000030\", border: \"2px solid var(--color-header-alpha)\"}} \n                src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/000000000000000000000000000000000000000000000000000000000000000f.png\" alt=\"rift 1 shard\" />\n            <img style={{maxWidth: \"20%\", margin: \"10px 2%\", padding: \"10px\", background: \"#00000030\", border: \"2px solid var(--color-header-alpha)\"}} \n                src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/0000000000000000000000000000000000000000000000000000000000000019.png\" alt=\"rift 1 shard\" />\n          </div>\n          <div style={{width: \"100%\", textAlign: \"center\"}}>puzzle shards</div>\n        </p>\n      </FAQSection> \n\n      <FAQSection question=\"How does it work?\">\n        <p>\n          Purchase shards from open rifts with Ether or ESCAPE tokens. Each rift\n          has a limited number of shards available - grab yours today!\n        </p>\n        <p>\n          <img style={{maxWidth: \"70%\", margin: \"10px 15%\", border: \"2px solid var(--color-header-alpha)\"}} \n               src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/buy-shards.png\" alt=\"faq-buy-shards\" />\n        </p>\n        <p>\n          Each shard is minted at random by the rift, once you have all the shards\n          in a puzzle, you can trade them in for the solved puzzle NFT.\n        </p>\n        <p>\n          The solved puzzle NFT is special, and earns 1 ESCAPE per day.\n        </p>\n      </FAQSection>\n      \n      <FAQSection question=\"ESCAPEs? What are these?\">\n        <p>\n          ESCAPEs are a tradeable ERC20 token that is minted by the EtherScapes contract\n          anytime a puzzle in a rift is solved. \n        </p>\n        <p>\n          Use ESCAPE to purchase tiles from open rifts. \n        </p>\n        <p>\n          ESCAPEs can also be used to give each rift puzzle a unique name of your \n          choosing. To assign a name to a puzzle, you must own the NFT for the puzzle\n          you are trying to name. Each time a picture is named, the naming cost \n          for the picture doubles.\n        </p>\n      </FAQSection>\n\n      <FAQSection question=\"Other market integration?\">\n        <p>\n          The EtherScape shards and solved puzzles are all tradeable NFTs (ERC1155\n          tokens). This means you can sell or trade the shards or puzzles on markets\n          like OpenSea and Rarible. \n        </p>\n        <p>\n          Find the pieces you are missing and trade duplicates to solve puzzles and \n          earn ESCAPE today!\n        </p>\n      </FAQSection>\n\n      <FAQSection question=\"Can I see the code?\">\n        <p>\n          All of the code involved in this project is available on GitHub and is \n          100% open source. Check out our \n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/etherscapes\">GitHub project page</a> for more info.\n        </p>\n        <p>\n          The contract was developed using Solidity, with tests implemented to boot.\n          The website is a React app hosted on GitHub pages, with the NFT metadata \n          currently hosted also via a public GitHub metadata project. Additionally,\n          this project uses a simple python project to cut up puzzle images into \n          N number of shards based on SVG cutouts that we generate.\n        </p>\n        <p>\n          We love feedback, and would appreciate your thoughts either in our \n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://discord.gg/kTmmeB6bes\">Discord</a>, \n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://reddit.com/r/etherscapes\">Reddit</a>,\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/etherscapes\">GitHub</a> channels.\n        </p>\n      </FAQSection>\n    </div>\n  );\n}\n\nexport default About;\n  ","import React from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\n\nimport PuzzleViewer from \"./PuzzleViewer.js\";\nimport Packs from \"./Packs.js\";\nimport Shard from \"./Shard.js\";\nimport About from \"./About.js\";\n\nconst Redirect = (props) => {\n  let history = useHistory();\n  const {to} = props;\n  history.push(to);\n  return <></>;\n}\n\nconst MainLayout = (props) => {\n  return (\n    <Switch> \n      {/* The Switch decides which component to show based on the current URL.*/}\n      <Route exact path=\"/\">\n        <Packs page=\"Home\" {...props} />\n      </Route>\n      <Route exact path=\"/about\">\n        <About></About>\n      </Route>\n      <Route exact path=\"/scene/:sid/puzzle/:pid\">\n        <PuzzleViewer page=\"PuzzleViewer\" {...props} />\n      </Route>\n      <Route exact path=\"/shard/:id\">\n        <Shard page=\"Shard\" {...props} />\n      </Route>\n      <Route path=\"*\">\n        <Redirect to=\"/\" />\n      </Route>\n    </Switch>\n  );\n}\n  \nexport default MainLayout;","import React from \"react\";\n\nimport RedditSVG from \"../svg/reddit.svg\";\nimport DiscordSVG from \"../svg/discord.svg\";\nimport GitHubSVG from \"../svg/github.svg\";\nimport TwitterSVG from \"../svg/twitter.svg\";\n\nexport const Footer = (props) => {\n  return (\n    <div className=\"footer\">\n      <span>© EtherScapes Inc</span>\n      <span className=\"grow\"></span>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"reddit\" href=\"https://www.reddit.com/r/Etherscapes\"><span><img src={RedditSVG} alt=\"github\"></img></span></a>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"discord\" href=\"https://discord.gg/kTmmeB6bes\"><span><img src={DiscordSVG} alt=\"github\"></img></span></a>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"twitter\" href=\"https://twitter.com/etherscapes\"><span><img src={TwitterSVG} alt=\"twitter\"></img></span></a>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"github\" href=\"https://github.com/etherscapes/contract\"><span><img src={GitHubSVG} alt=\"github\"></img></span></a>\n    </div>\n  );\n}","import { InjectedConnector } from '@web3-react/injected-connector'\n\nconst POLLING_INTERVAL = 12000\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","/*\n *  Entry-point for the RedVsBlue application.\n */\n\n// React and associated components.\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Web3 from \"web3\";\n\nimport MainLayout from \"./pages/MainLayout.js\";\nimport {Footer} from \"./components/Footer.js\";\n\n// Contract ABIs.\nimport _EscapeToken from \"./contract/EscapeToken.json\";\nimport _ESTile from \"./contract/ESTile.json\";\nimport _ESTileWrapper from \"./contract/ESTileWrapper.json\";\nimport _NamingContract from \"./contract/NamingContract.json\";\n\nimport { injected } from './components/Connectors.ts';\nimport { useWeb3React } from \"@web3-react/core\";\n// import {\n//   InjectedConnector,\n//   NoEthereumProviderError,\n//   UserRejectedRequestError as UserRejectedRequestErrorInjected\n// } from \"@web3-react/injected-connector\";\nimport { useEagerConnect, useInactiveListener } from \"./components/Hooks.ts\";\n// import { Web3Provider } from \"@ethersproject/providers\";\n// import { formatEther } from \"@ethersproject/units\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nimport \"./App.css\";\nimport { getNetwork } from \"@ethersproject/networks\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst prettyfyAddress = (acct, size) => {\n  if (!acct) return \"INVALID\";\n  const s = acct.substring(0, 2+size);\n  const e = acct.substring(acct.length-4, acct.length);\n  return s + \"...\" + e;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst App = (props) => {\n  const context = useWeb3React();\n  const { connector, chainId, account, activate, active, error } = context;\n\n  const network = getNetwork(chainId);\n  const networkName = (network && network.name) || \"unknown\";\n  const prettyAddress = prettyfyAddress(account, 4);\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n  const [contractsLoaded, setContractsLoaded] = useState(false);\n  const [escapeBalance, setEscapeBalance] = useState(toBN(0));\n  const [escapeClaimable, setEscapeClaimable] = useState(toBN(0));\n  const [numScenes, setNumScenes] = useState(0);\n  const [numClaims, setNumClaims] = useState(0);\n\n  const [escape, setEscape] = useState(undefined);\n  const [namer, setNamer] = useState(undefined);\n  const [estile, setESTile] = useState(undefined);\n  const [estilewrap, setESTileWrap] = useState(undefined);\n\n  // Callback to claim reward.\n  const claimReward = useCallback(async () => {\n    console.log(estile, account);\n    return await estile.claimReward({from: account});\n  }, [estile, account])\n\n  // If the chain changes, update the UI by taking over the contractsLoaded boolean.\n  useEffect(() => {\n    setContractsLoaded(false);\n  }, [chainId])\n\n  // If the chain changes, update all the contract ABIs.\n  useEffect(() => {\n    async function setupContracts() {\n      const contract = require(\"@truffle/contract\");\n\n      let EscapeTokenABI = contract(_EscapeToken);\n      let ESTileABI = contract(_ESTile);\n      let ESTileWrapperABI = contract(_ESTileWrapper);\n      let NamingContractABI = contract(_NamingContract);\n\n      EscapeTokenABI.setProvider(window.web3.currentProvider);\n      ESTileABI.setProvider(window.web3.currentProvider);\n      ESTileWrapperABI.setProvider(window.web3.currentProvider);\n      NamingContractABI.setProvider(window.web3.currentProvider);\n\n      const cEscape = await EscapeTokenABI.deployed();\n      const cESTile = await ESTileABI.deployed();\n      const cESTileWrap = await ESTileWrapperABI.deployed();\n      const cNamer = await NamingContractABI.deployed();\n\n      setESTile(cESTile);\n      setEscape(cEscape);\n      setESTileWrap(cESTileWrap);\n      setNamer(cNamer);\n\n      setContractsLoaded(true);\n    }\n    setupContracts();\n  }, [chainId, setNamer, setESTileWrap, setESTile, setEscape, setContractsLoaded]);\n\n  // If the chian or the user or the contracts change, update the balances and\n  // the scene data.\n  useEffect(() => {\n    async function setupBalances() {\n      if (!(estile && escape && account)) return;\n\n      setEscapeBalance(await escape.balanceOf(account));\n      setEscapeClaimable(await estile.getClaimInfo({from: account}))\n      setNumClaims(await estile.claimLength(account));\n\n      /*\n      *  Now we need to figure how many scenes there are and how many puzzles\n      *  in each scene. If we have tokens that correspond to a scene, we list\n      *  them here.\n      */\n      setNumScenes(await estile.sceneCount());\n\n      estile.allEvents()\n      .on(\"data\", (e) => {\n        console.log(e);\n      })\n      .on(\"error\", (err) => {\n        console.log(\"error\", err);\n      });\n    }\n    setupBalances();\n  }, [account, estile, escape, chainId,\n      setNumScenes, setNumClaims, setEscapeBalance, setEscapeClaimable])\n\n  // Callback to force wallet connection.\n  const connectInjectedWallet = useCallback(() => {\n    setActivatingConnector(injected)\n    activate(injected);\n  }, [setActivatingConnector, activate]);\n\n  // Activating - the wallet is attempting to open.\n  const activating = injected === activatingConnector;\n\n  // Connected - the account is connected.\n  const connected = injected === connector;\n\n  ////////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <NavLink exact activeClassName=\"isActive\" to=\"/\" data-tip data-for=\"networkInfoTooltip\">\n          EtherScapes\n        </NavLink>\n        <NavLink exact activeClassName=\"isActive\" to=\"/about\">FAQ</NavLink>\n        <div className=\"grow\"></div>\n        <div className=\"balance\" data-tip data-for=\"balanceTooltip\">\n          {escapeBalance.toString()} ESC\n        </div>\n        {escapeClaimable !== undefined && escapeClaimable.toNumber() > 0 &&\n          <div className=\"balance clickable\"\n                onClick={claimReward}\n                data-tip data-for=\"claimTooltip\">\n            ({escapeClaimable.toString()}, +{numClaims.toString()} per day)\n          </div>\n        }\n        {escapeClaimable !== undefined && escapeClaimable.toNumber() === 0 &&\n          <div className=\"balance\" data-tip data-for=\"claimTooltip\">\n            ({escapeClaimable.toString()}, +{numClaims.toString()} per day)\n          </div>\n        }\n        <ReactTooltip id=\"claimTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n          <p>Claimable ESCAPE, <br></br>\n              earnings per day.\n          </p>\n        </ReactTooltip>\n        <ReactTooltip id=\"balanceTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n          <p>Your current ESCAPE balance.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"networkInfoTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n          <p>{networkName} : {prettyAddress}</p>\n        </ReactTooltip>\n\n      </div>\n      <div className=\"App-body\">\n        <div className=\"App-scroll\">\n          <div style={{flexGrow: 1}}>\n            <MainLayout\n              connectWallet={connectInjectedWallet}\n              connected={connected} activating={activating} active={active}\n              numScenes={numScenes} contractsLoaded={contractsLoaded}\n              user={account} chainId={chainId}\n              balance={escapeBalance} claim={escapeClaimable}\n              escape={escape} estile={estile} namer={namer} estilewrap={estilewrap}\n              error={error}\n            />\n          </div>\n          <Footer style={{marginBottom: \"5px\"}}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './Connectors';\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nReactDOM.render((\n  <HashRouter>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  </HashRouter>\n), document.getElementById(\"root\"));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/buy.fcafa681.svg\";","module.exports = __webpack_public_path__ + \"static/media/opensea-logo.91c20fca.svg\";","module.exports = __webpack_public_path__ + \"static/media/collect.25b81051.svg\";","module.exports = __webpack_public_path__ + \"static/media/puzzle.79cd76ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/salary.c4c37578.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.1dee27c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.e2217522.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.31145889.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.3ad6654a.svg\";"],"sourceRoot":""}