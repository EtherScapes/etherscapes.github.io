{"version":3,"sources":["components/Loading.js","components/contractHelpers.js","pages/Shard.js","components/Overlays.js","components/ProgressBar.js","pages/PuzzleViewer.js","components/TileStore.js","pages/Packs.js","pages/About.js","pages/MainLayout.js","components/Footer.js","App.js","registerServiceWorker.js","index.js","svg/buy.svg","svg/opensea-logo.svg","svg/collect.svg","svg/puzzle.svg","svg/salary.svg","svg/reddit.svg","svg/discord.svg","svg/github.svg"],"names":["Loading","props","className","message","length","prettyfyId","strId","s","zs","ze","i","lenLeft","nftId","id","toString","padStart","tileImgUri","useBW","tileDataUri","getAllSceneInfo","estile","user","numScenes","a","scenes","sidx","getSceneInfo","push","getTokenBalance","tokenId","balanceOf","_b","totalSupply","_t","balance","supply","sceneId","tokenRangeForScene","_tokRange","tilesPerPuzzle","toNumber","numPuzzles","numTiles","sceneShardInfo","_tileInfo","start_tile_range","end_puzzle_range","start_puzzle_range","end_tile_range","tileTokenStart","tileTokenEnd","puzzleTokenStart","puzzleTokenEnd","maxTiles","Web3","utils","toBN","tilesLeft","ethCost","escCost","getShardInfo","tileJSON","fetch","rsp","json","ShardInner","prettyId","useState","desc","setDesc","tokInfo","setTokInfo","then","name","src","alt","description","href","address","OpenSeaLogo","Shard","useParams","intId","parseInt","require","Modal","ReactDOM","createPortal","onClick","doClose","e","stopPropagation","children","document","querySelector","useInput","type","def","value","setValue","onChange","target","useEscapeKey","onEscape","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","BuyTilesModal","numToBuy","numToBuyInput","isTxPending","setTxPending","undefined","tx","setTx","err","setErr","buyTilesETH","cost","toWei","estilewrap","buyTilesForETH","from","catch","updateSceneInfo","buyTilesEscape","buyTilesForEscape","closeModal","close","ethTileCost","escTileCost","bnNumToBuy","ethCostWei","mul","fromWei","ShardPreviewModal","ProgressBar","total","count","barStyle","width","height","marginLeft","marginRight","marginTop","background","display","justifyContent","border","progressStyle","style","alignItems","position","fontSize","left","top","Tile","setBalance","setTotal","isLoading","setLoading","result","update","preview","PuzzleViewer","history","useHistory","sid","pid","puzzleId","sceneLoading","setSceneLoading","sceneDesc","setSceneDesc","buyTilesForSceneId","setBuyTilesForSceneId","previewTokenId","setPreviewTokenId","ownedTokens","setOwnedTokens","updateOwnedTokens","tdesc","found","_owned","map","odesc","puzzleToken","setPuzzleToken","canvasRef","useRef","ownsSolvedToken","draw","context","ptok","canvas","current","hasBackground","img","Image","onload","drawImage","drawnTokens","tok","tileMeta","timg","th","attributes","tw","ty","this","image","puzzleNamer","setPuzzleNamer","puzzleName","setPuzzleName","showPuzzleNaming","setShowPuzzleNaming","puzzleNamingCost","setPuzzleNamingCost","newPuzzleName","newPuzzleNameInput","refreshPuzzleNameInfo","namer","getScenePuzzleInfo","solvePuzzle","redeemPuzzle","renamePuzzle","nameScenePuzzle","getContext","puzzleTileTokenRows","puzzleTokenRow","gotoScene","_sid","_pid","prevSceneClass","nextSceneClass","prevPuzzleClass","nextPuzzleClass","scene","puzzleTokenId","tileTokenOffset","key","uniqueTokensOwned","reduce","tokenDesc","ref","data-tip","data-for","arrowColor","place","BuySVG","TileStore","setScenes","_scenes","sdesc","scenesDOM","np","randomPuzzle","Math","floor","random","costInEther","newRiftComingSoon","role","aria-label","data-effect","data-place","CollectSVG","SolveSVG","EarnSVG","Packs","FAQSection","show","setShow","question","About","MainLayout","exact","path","page","Footer","GitHubSVG","DiscordSVG","RedditSVG","App","resolve_promise","f","args","Promise","resolve","reject","initWeb3","ethereum","request","method","accounts","updateAccounts","on","enable","console","log","web3","currentProvider","error","setState","instantiateContracts","firstTime","eth","getAccounts","updateApp","claimReward","state","contract","contracts_abi","EscapeToken","_EscapeToken","ESTile","_ESTile","ESTileWrapper","_ESTileWrapper","NamingContract","_NamingContract","setProvider","deployed","escape","subscribeToEvents","escapeBalance","getClaimInfo","escapeClaimable","claimLength","numClaims","sceneCount","allEvents","bind","contracts","activeClassName","to","flexGrow","claim","numPacks","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","render","getElementById","URL","process","origin","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.d219d664.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loading.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const Loading = (props) => {\n  return (\n    <div className=\"App-loading\">\n      <div className=\"message\">{props.message}</div>\n      {props.message && props.message.length > 0 &&\n        <div className=\"loading-animation\">\n          <div></div><div></div><div></div>\n        </div>\n      }\n    </div>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////","import Web3 from \"web3\";\n\nexport const prettyfyId = (strId) => {\n  let s = \"0x\";\n  let zs = strId.length;\n  let ze = 0;\n  for (var i = 0; i < strId.length; i++) {\n    if (strId[i] === '0' && i < zs) zs = i;\n    if (strId[i] === '0' && i > ze) ze = i;\n  }\n  if (zs < 4) zs = 4;\n  let lenLeft = 64 - ze;\n  if (lenLeft < 5) {\n    ze -= (5 - lenLeft);\n  }\n  for (i = 0; i < strId.length; i++) {\n    if (i === zs) { s += \"...\"; }\n    if (i <= ze && i >= zs) continue;\n    s += strId[i];\n  }\n  return s;\n}\n\nexport const nftId = (id) => {\n  return id.toString(16).padStart(64, 0);\n}\n\nexport const tileImgUri = (id, useBW=false) => {\n  if (useBW) {\n    return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\"_bw.png\"\n  }\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".png\";\n}\n\nexport const tileDataUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/tile/\"+nftId(id)+\".json\";\n}\n\nexport const packImgUri = (id) => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/pack/\"+nftId(id)+\".png\";\n}\n\nexport const packGifUri = () => {\n  return \"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.gif\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getAllSceneInfo = async (estile, user, numScenes) => {\n  /*\n   *  All pack token ids start at 1, query stats for each one so we know how \n   *  many are left, if they can be purchased and our personal count for them.\n   * \n   *  The `TileStore` component is how we open / purchase / see our packs.\n   */\n  let scenes = [];\n  for (var sidx = 1; sidx <= numScenes; sidx++) {\n    scenes.push(await getSceneInfo(estile, user, sidx));\n  }\n  return scenes;\n}\n\n\nexport const getAllSceneSaleInfo = async (estile, user, numScenes) => {\n    /*\n     *  All pack token ids start at 1, query stats for each one so we know how \n     *  many are left, if they can be purchased and our personal count for them.\n     * \n     *  The `TileStore` component is how we open / purchase / see our scenes.\n     */\n    let scenes = [];\n    for (var sidx = 1; sidx <= numScenes; sidx++) {\n      scenes.push(await getSceneSaleInfo(estile, user, sidx));\n    }\n    return scenes;\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const getTokenBalance = async (estile, user, tokenId) => {\n  const _b = await estile.balanceOf(user, tokenId);\n  const _t = await estile.totalSupply(tokenId);\n  return {\n    balance: _b,\n    supply: _t,\n  }\n}\n\n/*\n *  Load scene will fetch a scene and all its tokens (tiles + puzzles)\n *  and compute their balances so that the renderer can fetch the needed\n *  metadata and render our website correctly.\n */\nexport const getSceneInfo = async (estile, user, sceneId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n  const _tileInfo = await estile.sceneShardInfo(sceneId);\n  \n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber();\n  const end_tile_range = start_tile_range + numTiles - 1;\n  const start_puzzle_range = end_tile_range + 1;\n  const end_puzzle_range = start_puzzle_range + numPuzzles - 1;\n\n  return {\n    sceneId: sceneId,\n    tileTokenStart: start_tile_range,\n    tileTokenEnd: end_tile_range,\n    puzzleTokenStart: start_puzzle_range,\n    puzzleTokenEnd: end_puzzle_range,\n    numTiles: numTiles,\n    maxTiles: Web3.utils.toBN(sceneId === 1 ? \"1200\" : \"0\"),\n    tilesLeft: _tileInfo[0],\n    ethCost: _tileInfo[1],\n    escCost: _tileInfo[2],\n    numPuzzles: numPuzzles,\n    tilesPerPuzzle: tilesPerPuzzle,\n  };\n}\n\nexport const getPuzzleTokensAndBalances = async (estile, user, sceneId, puzzleId) => {\n  const _tokRange = await estile.tokenRangeForScene(sceneId);\n  const tilesPerPuzzle = _tokRange[1].toNumber();\n  const numPuzzles = _tokRange[2].toNumber();\n  const numTiles = tilesPerPuzzle * numPuzzles;\n\n  // Ranges for the tokens in this scene. \n  const start_tile_range = _tokRange[0].toNumber() + (puzzleId * tilesPerPuzzle);\n  const end_tile_range = start_tile_range + tilesPerPuzzle - 1;\n  const puzzleToken = start_tile_range + (numTiles);\n  \n  let tileTokenBalances = [];\n  let tileTokenTotalBalances = [];\n  for (var ttok = start_tile_range; ttok <= end_tile_range; ttok++) {\n    const tokInfo = await getTokenBalance(estile, user, ttok);\n    tileTokenBalances.push(tokInfo.balance.toNumber());\n    tileTokenTotalBalances.push(tokInfo.supply.toNumber());\n  }\n  \n  let puzzleTokenBalance;\n  let puzzleTokenTotalBalance;\n  const tokInfo = await getTokenBalance(estile, user, puzzleToken);\n  puzzleTokenBalance = tokInfo.balance.toNumber();\n  puzzleTokenTotalBalance = tokInfo.supply.toNumber();\n  let canRedeem = true;\n  for (var i = 0; i < tilesPerPuzzle; i++) {\n    if (tileTokenBalances[i] <= 0) canRedeem = false;\n  }\n\n  return {\n    sceneId: sceneId,\n    tileTokenBalances: tileTokenBalances,\n    tileTokenTotalBalances: tileTokenTotalBalances,\n    puzzleTokenBalance: puzzleTokenBalance,\n    puzzleTokenTotalBalance: puzzleTokenTotalBalance,\n    puzzleRedeemable: canRedeem,\n  };\n}\n\nexport const getSceneSaleInfo = async (estile, user, sceneId) => {\n    const _tokRange = await estile.tokenRangeForScene(sceneId);\n    const tilesPerPuzzle = _tokRange[1];\n    const numPuzzles = _tokRange[2];\n    const tilesLeft = await estile.sceneShardInfo(sceneId);\n  \n    return {\n      sceneId: sceneId,\n      tilesLeft: tilesLeft,\n      numPuzzles: numPuzzles,\n      tilesPerPuzzle: tilesPerPuzzle,\n    };\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n","import React, {useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {Loading} from \"../components/Loading.js\";\nimport {tileDataUri, tileImgUri, nftId, prettyfyId, getTokenBalance} from \"../components/contractHelpers.js\";\n\nimport OpenSeaLogo from '../svg/opensea-logo.svg';\n\nconst getShardInfo = async (id) => {\n  const tileJSON = tileDataUri(id);\n  const rsp = await fetch(tileJSON); \n  return await rsp.json();\n}\n\nexport const ShardInner = (props) => {\n  const prettyId = prettyfyId(nftId(props.id));\n  const [desc, setDesc] = useState();\n  const [tokInfo, setTokInfo] = useState();\n\n  if (!desc && props.user && props.estile) {\n    getShardInfo(props.id)\n      .then(setDesc);\n  }\n  if (!tokInfo && props.user && props.estile) {\n    getTokenBalance(props.estile, props.user, props.id)\n      .then(setTokInfo);\n  }\n\n  if (!desc || !tokInfo) {\n    return (\n      <div className=\"Shard-main\">\n        <Loading message=\"Fetching token details\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"shard-main\">\n      <div className=\"shard-header\">\n        {desc.name}\n        <span className=\"grow\" />\n      </div>\n      <div className=\"bg\">\n        <img src={tileImgUri(props.id)} alt={props.id} />\n      </div>\n      <p>{desc.description}</p>\n      <p>The NFT id for this shard is {prettyId}.</p>\n      <p>There are currently {tokInfo.supply.toString()} of these tokens in existence, and you own {tokInfo.balance.toString()} of them!\n      </p>\n      <div className=\"social-link\">\n        <div>View this NFT on: </div>\n        <div>\n          <a href={\"https://opensea.io/assets/\"+props.estile.address+\"/\"+props.id}>\n            <img src={OpenSeaLogo} alt=\"OpenSea\" /><span>OpenSea</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/*\n *  If we end up rendering shards as a separate page, use this component to \n *  wrap the `ShardInner` and parse the hex string etc from the URL params.\n */\nexport const Shard = (props) => {\n  let {id} = useParams();\n  const intId = parseInt(id, 16);\n  return (\n    <div className=\"shard-page\">\n      <ShardInner {...props} id={intId} />\n    </div>\n  );\n}\n\nexport default Shard;","import React, {useState, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {ShardInner} from \"../pages/Shard.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar Web3 = require(\"web3\");\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const Modal = (props) => {\n  return ReactDOM.createPortal(\n    <div className=\"modal\" onClick={()=>{props.doClose && props.doClose()}}>\n      <div className=\"modal-body\" onClick={(e)=>{e.stopPropagation()}}>\n        {props.children}\n      </div>\n    </div>,\n    document.querySelector(\"#modal\"));\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const useInput = (type, def) => {\n  const [value, setValue] = useState(def);\n  const input = <input value={value} \n                        onChange={e => setValue(e.target.value)} \n                        type={type} />;\n  return [value, input];\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const useEscapeKey = (onEscape) => {\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) \n        onEscape();\n      };\n      window.addEventListener(\"keydown\", handleEsc);\n\n      return () => {\n        window.removeEventListener(\"keydown\", handleEsc);\n      };\n    }, [onEscape]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const BuyTilesModal = (props) => {\n  const [numToBuy, numToBuyInput] = useInput(\"number\", 1);\n  const [isTxPending, setTxPending] = useState(false);\n  const [tx, setTx] = useState(undefined);\n  const [err, setErr] = useState(undefined);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const buyTilesETH = async () => {\n    setTx(undefined);\n    setTxPending(true);\n\n    let cost = Web3.utils.toWei(\"0.02\", \"ether\");\n    const rsp = await props.estilewrap.buyTilesForETH(props.sceneId, numToBuy, {\n      value: cost * numToBuy, \n      from: props.user\n    }).catch((err) => {\n      setErr(err)\n    });\n\n    if (rsp) {\n      setTx(rsp.tx);\n      setTxPending(false);\n      props.updateSceneInfo(props.sceneId);\n    }\n  }\n\n  const buyTilesEscape = async () => {\n    setTx(undefined);\n    setTxPending(true);\n\n    const rsp = await props.estilewrap.buyTilesForEscape(props.sceneId, numToBuy, {\n      from: props.user\n    }).catch((err) => {\n      setErr(err);\n    });\n\n    if (rsp) {\n      setTx(rsp.tx);\n      setTxPending(false);\n      props.updateSceneInfo(props.sceneId);\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n  \n  const closeModal = () => {\n    setErr(undefined);\n    setTxPending(false);\n    setTx(undefined);\n    props.close();\n  }\n\n  useEscapeKey(() => closeModal());\n  \n  const ethTileCost = toBN(Web3.utils.toWei(\"0.02\", \"ether\").toString());\n  const escTileCost = toBN(Web3.utils.toWei(\"5\", \"wei\").toString());\n  const bnNumToBuy = toBN(numToBuy.toString());\n  const ethCostWei = ethTileCost.mul(bnNumToBuy);\n  const escCost = (escTileCost.mul(bnNumToBuy)).toString();\n  const ethCost = Web3.utils.fromWei(ethCostWei, \"ether\").toString();\n\n  return (\n    <>\n      {props.sceneId > 0 &&\n        <Modal doClose={()=>{closeModal()}}>\n          <div className=\"tilestore-modal\">\n            <h1>Buying tiles for rift {props.sceneId}</h1>\n            <br></br>\n            {!isTxPending && !tx && \n              <>\n                <div className=\"col\">\n                  <div>Number of shards to purchase:</div>\n                </div>\n                <div className=\"col input-div\">\n                  {numToBuyInput}\n                </div>\n              </>}\n              {isTxPending && !tx &&\n                <div className=\"col\">\n                  <div>Transaction pending ...</div>\n                </div>\n              }\n              {!isTxPending && tx && \n                <div className=\"col\">\n                  <div><a className=\"clickable\" href={\"https://etherscan.io/tx/\"+tx}>view tx etherscan</a></div>\n                </div>\n              }\n              <>\n                <br></br>\n                <div className=\"col\">\n                  {!isTxPending && !tx && <>\n                    <div className=\"clickable\" onClick={() => {buyTilesEscape();}}>Use {escCost} ESC</div>\n                    <span className=\"spacer\"></span>\n                    <div className=\"clickable\" onClick={() => {buyTilesETH();}}>Use {ethCost} ETH</div>\n                  </>}\n                  {err &&\n                    <div className=\"col\">\n                      <div>Uh oh, thats an error ...</div>\n                    </div>\n                  }\n                  <div className=\"grow\"></div>\n                  <div className=\"clickable\" onClick={() => {closeModal()}}>CLOSE</div>\n                </div>\n              </>\n          </div>\n        </Modal>\n      }\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const ShardPreviewModal = (props) => {\n  \n  useEscapeKey(() => props.close());\n\n  return (\n    <>\n      {props.tokenId > 0 &&\n        <Modal>\n          <div className=\"tilestore-modal\">\n            <ShardInner {...props} id={props.tokenId} />\n            <br></br>\n            <div className=\"col\">\n              <div className=\"grow\"></div>\n              <div className=\"clickable\" onClick={() => {props.close()}}>CLOSE</div>\n            </div>\n          </div>\n        </Modal>\n      }\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////","import React from \"react\";\n\nexport const ProgressBar = (props) => {\n  if (!props.total) return (<>...</>);\n  const count = props.count || 0;\n  const barStyle = {\n    width: props.width || \"120px\",\n    height: props.height || \"24px\",\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n    marginTop: \"4px\",\n    background: \"black\",\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    border: \"1px solid var(--color-background)\",\n  };\n  const progressStyle = {\n    background: \"var(--color-special)\",\n    border: \"1px solid var(--color-font)\",\n    width: (100*(count / props.total))+\"%\",\n  };\n  const statusStyle = {\n    height: \"24px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"10pt\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"5px\",\n  };\n  const containerStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n  }\n\n  return (\n    <div className=\"progressbar-container\" style={containerStyle}>\n      <div className=\"progressbar\" style={barStyle}>\n        <div className=\"progress\" style={progressStyle}>\n        </div>\n      </div>\n      <div className=\"status\" style={statusStyle}>\n        {count} / {props.total}\n      </div>\n    </div>\n  )\n}","import React, {useState, useRef, useEffect} from \"react\";\nimport { useParams } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport {Loading} from \"../components/Loading.js\";\nimport {useInput} from \"../components/Overlays.js\";\nimport {ProgressBar} from \"../components/ProgressBar.js\";\nimport {getSceneInfo, getTokenBalance, nftId, prettyfyId, tileImgUri, tileDataUri} from \"../components/contractHelpers.js\";\nimport {BuyTilesModal, ShardPreviewModal} from \"../components/Overlays.js\";\n\nimport BuySVG from \"../svg/buy.svg\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst Tile = (props) => {\n  const [balance, setBalance] = useState(\"...\");\n  const [total, setTotal] = useState(\"...\");\n  const [isLoading, setLoading] = useState(true);\n\n  if (props.estile && props.user && isLoading) {\n    getTokenBalance(props.estile, props.user, props.id)\n      .then((result) => {\n        setBalance(result.balance);\n        setTotal(result.supply);\n        setLoading(false);\n        if (props.update) { \n          props.update(props.id, {\n            id: props.id, \n            balance: result.balance,\n            total: result.supply,\n          });\n        }\n      });\n  }\n  return (\n    <div className=\"th shard-row\" onClick={()=>{props.preview(props.id)}}>\n      <div><img src={tileImgUri(props.id)} alt=\"\" width=\"42px\" height=\"auto\"></img> ({props.type})</div>\n      <div>{balance.toString()}</div>\n      <div>{total.toString()}</div>\n      <div>{prettyfyId(nftId(props.id))}</div>\n    </div>\n  );\n}\n////////////////////////////////////////////////////////////////////////////////\n\nconst PuzzleViewer = (props) => {\n  let history = useHistory();\n  let {sid, pid} = useParams();\n\n  const sceneId = sid;\n  const puzzleId = parseInt(pid) - 1; // 0-based\n  const [sceneLoading, setSceneLoading] = useState(true);\n  const [sceneDesc, setSceneDesc] = useState({});\n  const [buyTilesForSceneId, setBuyTilesForSceneId] = useState(0);\n  const [previewTokenId, setPreviewTokenId] = useState(0);\n\n  const [ownedTokens, setOwnedTokens] = useState([]);\n  const updateOwnedTokens = (id, tdesc) => {\n    let found = false;\n    const _owned = ownedTokens.map((odesc) => {\n      if (odesc.id === tdesc.id) {\n        found = true;\n        return tdesc;\n      } \n      return odesc;\n    });\n    if (found) {\n      setOwnedTokens(_owned);\n    } else {\n      ownedTokens.push(tdesc)\n      setOwnedTokens(ownedTokens);\n    }\n  }\n\n  const [puzzleToken, setPuzzleToken] = useState({});\n  const updatePuzzleToken = (id, tdesc) => {\n    if (canvasRef.current.hasBackground !== id) canvasRef.current.hasBackground = undefined;\n    setPuzzleToken(tdesc);\n  }\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  const canvasRef = useRef(null);\n\n  const ownsSolvedToken = puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0;\n\n  const draw = async (context, reset=false) => {\n    if (sceneDesc.sceneId === undefined) return;\n    \n    const ptok = sceneDesc.puzzleTokenStart + puzzleId;\n    const canvas = canvasRef.current;\n\n    if (!canvas.hasBackground && puzzleToken.balance !== undefined) {\n      var img = new Image();\n      img.width = 1920;\n      img.height = 1080;\n      img.onload = async () => {\n        context.drawImage(img, 0, 0);\n        canvas.hasBackground = ptok;\n        canvas.drawnTokens = {};\n        draw(context);\n      }\n      img.src = tileImgUri(ptok, ownsSolvedToken === false); // enable bw mode for non owned tokens.\n    }\n    \n    if (canvas.hasBackground) {\n      for (let tok of ownedTokens) {\n        // Tokens with no ownership are not drawn.\n        if (tok.balance.toNumber() === 0) continue;\n\n        // Tokens drawn after a clear are not updated if they have also been drawn.\n        if (tok.id in canvas.drawnTokens) continue;\n        canvas.drawnTokens[tok.id] = true;\n        const tileJSON = tileDataUri(tok.id);\n        const rsp = await fetch(tileJSON); \n        const tileMeta = await rsp.json();\n        \n        var timg = new Image();\n        timg.th = tileMeta.attributes[0][\"value\"];\n        timg.tw = tileMeta.attributes[1][\"value\"];\n        timg.tx = tileMeta.attributes[2][\"value\"];\n        timg.ty = tileMeta.attributes[3][\"value\"];\n        timg.width = timg.tw;\n        timg.height = timg.th; \n        timg.onload = function() {\n          context.drawImage(this, this.tx - this.tw / 2, this.ty - this.th / 2);\n        }\n        timg.src = tileMeta.image; \n      }\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const [puzzleNamer, setPuzzleNamer] = useState(\"\");\n  const [puzzleName, setPuzzleName] = useState(\"Unnamed\");\n  const [showPuzzleNaming, setShowPuzzleNaming] = useState(false);\n  const [puzzleNamingCost, setPuzzleNamingCost] = useState(0);\n  const [newPuzzleName, newPuzzleNameInput] = useInput(\"text\", \"\");\n\n  const refreshPuzzleNameInfo = async (sid, pid) => {\n    const result = await props.namer.getScenePuzzleInfo(sid, pid);\n    setPuzzleNamingCost(result[0].toNumber());\n    if (result[1] === \"\") setPuzzleName(\"Unnamed\");\n    else setPuzzleName(result[1]);\n    setPuzzleNamer(result[2]);\n  }\n\n  const solvePuzzle = async (sid, pid) => {\n    await props.estile.redeemPuzzle(sid, pid, {from: props.user});\n  }\n\n  const renamePuzzle = async (sid, pid, name) => {\n    await props.namer.nameScenePuzzle(sid, pid, name, {from: props.user});\n    refreshPuzzleNameInfo(sid, pid);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  useEffect(() => {\n    if (sceneLoading) return;\n    const canvas = canvasRef.current\n    const context = canvas.getContext(\"2d\")\n    draw(context);\n    refreshPuzzleNameInfo(sceneId, puzzleId);\n  }, [draw, refreshPuzzleNameInfo, sceneId, puzzleId, sceneLoading, ownedTokens, puzzleToken, sceneDesc]);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = async (_sid, _pid) => {\n    setShowPuzzleNaming(false);\n    if (_sid !== sceneId) setSceneLoading(true);\n    if (_pid !== puzzleId) setOwnedTokens([]); // reset - ing puzzles.\n    history.push(\"/scene/\" + _sid + \"/puzzle/\" + (_pid+1));\n  }\n  const prevScene = () => { if (sceneId > 1) gotoScene(sceneId - 1, 0); }\n  const nextScene = () => { if (sceneId < props.numScenes.toNumber()) gotoScene(sceneId + 1, 0); }\n  const prevPuzzle = () => { if (puzzleId > 0) gotoScene(sceneId, puzzleId - 1); }\n  const nextPuzzle = () => { if (puzzleId < sceneDesc.numPuzzles - 1) gotoScene(sceneId, puzzleId + 1); }\n  \n  const prevSceneClass = (sceneId > 1) ? \"clickable\" : \"invalid\";\n  const nextSceneClass = (props.numScenes && (sceneId < props.numScenes.toNumber()) ? \"clickable\" : \"invalid\") || \"invalid\";\n  const prevPuzzleClass = (puzzleId > 0) ? \"clickable\" : \"invalid\";\n  const nextPuzzleClass = (puzzleId < sceneDesc.numPuzzles - 1) ? \"clickable\" : \"invalid\";\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (!props.estile || !props.user) return <Loading message=\"Checking contracts \" />;\n\n  if (sceneLoading && props.user && props.estile) {\n    getSceneInfo(props.estile, props.user, sceneId)\n      .then((scene) => {\n        setSceneDesc(scene);\n        setSceneLoading(false);\n      });\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  if (sceneLoading) {\n    return <Loading message={\"Scene \"+ sceneId +\" loading \"}/>;\n  }\n\n  let puzzleTileTokenRows;\n  let puzzleTokenRow;\n  if (sceneLoading) {\n    puzzleTokenRow = (<></>);\n    puzzleTileTokenRows = (<></>);\n  } else {\n    const puzzleTokenId = sceneDesc.puzzleTokenStart + puzzleId;\n    const tileTokenOffset = puzzleId * sceneDesc.tilesPerPuzzle\n    const tileTokenStart = sceneDesc.tileTokenStart + tileTokenOffset;\n    \n    puzzleTokenRow = <Tile {...props} \n                           update={updatePuzzleToken} \n                           preview={(id) => {setPreviewTokenId(id)}}\n                           type=\"puzzle\" id={puzzleTokenId} \n                           key={puzzleTokenId} />;\n    puzzleTileTokenRows = [];\n    for (var i = 0; i < sceneDesc.tilesPerPuzzle; i++) {\n      puzzleTileTokenRows.push(\n        <Tile {...props} \n              preview={(id) => {setPreviewTokenId(id)}}\n              update={updateOwnedTokens} \n              type=\"tile\" id={tileTokenStart+i} key={tileTokenStart+i} />\n      );\n    }\n  }\n\n  const uniqueTokensOwned = ownedTokens.reduce((count, tokenDesc) => {\n    if (tokenDesc.balance > 0) {\n      return count + 1;\n    }\n    return count;\n  }, 0);\n\n  return (\n    <div className=\"Home-main\">\n      <BuyTilesModal\n        {...props} \n        sceneId={buyTilesForSceneId}\n        updateSceneInfo={() => {setSceneLoading(false)}} \n        close={() => {setBuyTilesForSceneId(0)}} />\n      <ShardPreviewModal \n        {...props}\n        tokenId={previewTokenId}\n        close={() => {setPreviewTokenId(0)}} />\n      {!sceneLoading && \n        <div className=\"title\">\n          <span>Scene</span>\n          <span className={prevSceneClass} onClick={prevScene}>&lt;</span>\n          {sceneId}\n          <span className={nextSceneClass} onClick={nextScene}>&gt;</span>\n          <span className=\"spacer\" />\n          Puzzle\n          <span className={prevPuzzleClass} onClick={prevPuzzle}>&lt;</span>\n          {puzzleId+1}\n          <span className={nextPuzzleClass} onClick={nextPuzzle}>&gt;</span>\n          <span className=\"spacer\" />\n          <span className=\"grow\"></span>\n          {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0 &&\n            <span style={{marginRight: \"15px\"}}>solved x{puzzleToken.balance.toString()}</span>\n          }\n        </div>}\n      \n      {!sceneLoading && \n        <div className=\"puzzle-viewer\">\n          <div className=\"puzzle-name clickable\">\n            <div className=\"grow\" style={{width: \"100%\"}} onClick={()=>{setShowPuzzleNaming(!showPuzzleNaming)}}>\n              \"{puzzleName}\"\n            </div>\n            {showPuzzleNaming && \n              <div className=\"puzzle-name-details\">\n                <div>This puzzle currently costs {puzzleNamingCost} ESCAPE to rename.</div>\n                <div>The last address to name the puzzle was {puzzleNamer}.</div>\n                {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() > 0 &&\n                  <div className=\"puzzle-name-input\">\n                    {newPuzzleNameInput} \n                    <div className=\"clickable\" onClick={()=>{renamePuzzle(sceneId, puzzleId, newPuzzleName)}}>Rename puzzle</div>\n                  </div>\n                }\n                {puzzleToken && puzzleToken.balance && puzzleToken.balance.toNumber() === 0 &&\n                  <div>You must first solve the puzzle to name it.</div>\n                }\n              </div>\n            }\n          </div>\n          <canvas ref={canvasRef} className=\"canvas\" width=\"1920\" height=\"1080\">\n            Blocks: art on the blockchain.\n          </canvas>\n          <div className=\"puzzle-toolbar\">\n            {uniqueTokensOwned < sceneDesc.tilesPerPuzzle &&\n            <>\n              <ProgressBar \n                count={uniqueTokensOwned} \n                total={sceneDesc.tilesPerPuzzle} >\n              </ProgressBar>\n              <div style={{marginLeft: \"8px\", fontSize: \"10pt\"}}>\n                shards collected\n              </div>\n            </>\n            }\n            {uniqueTokensOwned === sceneDesc.tilesPerPuzzle &&\n            <>\n              <div className=\"clickable\" style={{marginLeft: \"15px\"}} \n                   onClick={()=>{solvePuzzle(sceneId, puzzleId)}}\n                   data-tip data-for=\"solveTooltip\">\n                solve puzzle\n              </div>\n              <ReactTooltip id=\"solveTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n                <p>Merge all shards in a puzzle to<br></br> \n                   solve it and mint a rare puzzle<br></br>\n                   token.\n                </p>\n              </ReactTooltip>\n            </>\n            }\n            <div className=\"grow\"></div>\n            <div className=\"col clickable\" onClick={()=>{setBuyTilesForSceneId(sceneId)}}>\n              <img src={BuySVG} alt=\"buy shards\"></img> buy shards\n            </div>\n          </div>\n          <div className=\"token-table\">\n            <div className=\"th underline\">\n              <div></div>\n              <div>Balance</div>\n              <div>Supply</div>\n              <div>Token ID</div>\n            </div>\n            {puzzleTokenRow}\n            {puzzleTileTokenRows}\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default PuzzleViewer;\n  ","import React, {useState} from \"react\";\nimport { useHistory } from \"react-router\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport {Loading} from \"./Loading.js\";\nimport {packGifUri, getAllSceneInfo, getSceneInfo, tileImgUri } from \"./contractHelpers.js\";\nimport {BuyTilesModal} from \"./Overlays.js\";\n\nimport \"./TileStore.css\";\n\nimport CollectSVG from \"../svg/collect.svg\";\nimport SolveSVG from \"../svg/puzzle.svg\";\nimport EarnSVG from \"../svg/salary.svg\";\nimport BuySVG from \"../svg/buy.svg\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar Web3 = require(\"web3\");\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst TileStore = (props) => {\n  const history = useHistory();\n  const [isLoading, setLoading] = useState(true);\n  const [scenes, setScenes] = useState([]);\n  const [buyTilesForSceneId, setBuyTilesForSceneId] = useState(0);\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const gotoScene = (sid, pid) => {\n    history.push(\"/scene/\" + sid + \"/puzzle/\" + (pid+1));\n  }\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  const updateSceneInfo = async (sidx) => {\n    let desc = await getSceneInfo(props.estile, props.user, sidx);\n    let found = false;\n    let _scenes = scenes.map((sdesc) => {\n      if (sdesc.sceneId === desc.sceneId) {\n        found = true;\n        return desc;\n      }\n      return sdesc;\n    });\n    if (found) {\n      setScenes(_scenes);\n    } else {\n      setScenes(...scenes, desc);\n    }\n  }\n  \n  //////////////////////////////////////////////////////////////////////////////\n\n  if (!props.estile || !props.user) {\n    return <Loading message=\"Talking to contract\" />;\n  }\n\n  if (props.estile && props.user && props.numScenes && isLoading) {\n    getAllSceneInfo(props.estile, props.user, props.numScenes.toNumber())\n      .then((_scenes) => {\n        setScenes(_scenes)\n        setLoading(false);\n      });\n    return <Loading message=\"Loading scenes\" />;\n  } \n\n  //////////////////////////////////////////////////////////////////////////////\n  const scenesDOM = scenes.map((scene, i) => {\n    const np = scene.puzzleTokenEnd - scene.puzzleTokenStart + 1;\n    const randomPuzzle = scene.puzzleTokenStart + Math.floor(Math.random() * np); \n    const sceneId = scene.sceneId;\n    const costInEther = Web3.utils.fromWei(scene.ethCost.toString(), \"ether\");\n    return (\n      <div key={sceneId} className=\"TileStore-pack\">\n        <div className=\"scene-list\">\n          <div className=\"pack-holder\">\n            <div className=\"pack\" \n                 onClick={()=>{gotoScene(1, 0)}}\n                 data-tip data-for=\"packTooltip\">\n              <img className=\"static\" src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.png\" alt={1} />\n              <img className=\"active\" src={packGifUri()} alt={sceneId} />\n              <img className=\"bg\" src={tileImgUri(randomPuzzle)} alt={sceneId} />\n            </div>\n          </div>\n          <div className=\"scene-details\">\n            <div className=\"col\">\n              <div>rift #{scene.sceneId}</div>\n              <div>{scene.tilesLeft.toString()} / {scene.maxTiles.toString()} shards left</div>\n            </div>\n            <div className=\"col\">\n              <div>shard cost:</div>\n              <div>{costInEther} ETH / {scene.escCost.toString()} ESC</div>\n            </div>\n            {scene.tilesLeft.toNumber() > 0 && \n              <div className=\"col\">\n                <div className=\"grow\"></div>\n                <div className=\"buy-tiles clickable\" onClick={()=>{setBuyTilesForSceneId(sceneId)}}>\n                  <img src={BuySVG} alt=\"buy shards\"></img> buy shards\n                </div>\n              </div>\n            }\n            {scene.tilesLeft.toNumber() === 0 && \n              <div>All sold out, trade shards to solve puzzles!</div>\n            }\n            <ReactTooltip id=\"packTooltip\" place=\"bottom\" arrowColor=\"var(--color-font)\" >\n              <div>Explore rift #{sceneId}</div>\n            </ReactTooltip>\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const newRiftComingSoon = (\n    <div key={1} className=\"TileStore-pack\">\n      <div className=\"scene-list\">\n        <div className=\"pack-holder\">\n          <div className=\"pack\">\n            <img className=\"static\" src=\"https://raw.githubusercontent.com/EtherScapes/metadata/master/img/rift-seethru.png\" alt={1} />\n            <img className=\"active\" src={packGifUri()} alt={1} />\n            <div className=\"bg\">?</div>\n          </div>\n        </div>\n        <div className=\"scene-details\">\n          <div className=\"col\">\n            <div></div>\n            <div>new rift dropping soon!</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <div className=\"tooltips\">\n        <ReactTooltip id=\"infoEscapeTooltip\" arrowColor=\"var(--color-font)\">\n          <p><span role=\"img\" aria-label=\"burn\">🔥</span> Burn ESCAPE (ERC20) for shards from open rifts.</p>\n          <p><span role=\"img\" aria-label=\"burn\">🔥</span> Burn ESCAPE to (re)name solved puzzles.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"infoShardTooltip\" arrowColor=\"var(--color-font)\">\n          <p><span role=\"img\" aria-label=\"tile\">🧩</span> Shards are puzzle pieces from EtherScape rifts.</p>\n          <p><span role=\"img\" aria-label=\"contract\">📰</span> Each shard is a NFT (ERC1155) with limited supply.</p>\n          <p><span role=\"img\" aria-label=\"factory\">🚧</span> Rifts will mint random shards until they run out.</p>\n          <p><span role=\"img\" aria-label=\"earn\">💰</span> Trade shard tokens on 3rd party markets.</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"infoPuzzleTooltip\" arrowColor=\"var(--color-font)\">\n          <p><span role=\"img\" aria-label=\"tile\">🧩</span> Each rift contains a set number of puzzles to solve.</p>\n          <p><span role=\"img\" aria-label=\"burn\">🔥</span> Burn all shards from a puzzle to solve it.</p>\n          <p><span role=\"img\" aria-label=\"earn\">💰</span> Solved puzzles reward even rarer NFTs and earn 1 ESCAPE per day.</p>\n          <p><span role=\"img\" aria-label=\"earn\">💰</span> Trade completed puzzle tokens on 3rd party markets.</p>\n        </ReactTooltip>\n      </div>\n      <div className=\"TileStore-main\">\n        <BuyTilesModal\n          {...props} \n          sceneId={buyTilesForSceneId}\n          updateSceneInfo={updateSceneInfo} \n          close={() => {setBuyTilesForSceneId(0)}} />\n        <div className=\"TileStore-blurb\">\n          <div className=\"clickable\" data-tip data-for=\"infoShardTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={CollectSVG} alt=\"collect\" />\n            <div>collect shards</div>\n          </div>\n          <div className=\"clickable\" data-tip data-for=\"infoPuzzleTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={SolveSVG} alt=\"solve\" />\n            <div>solve puzzles</div>\n          </div>\n          <div className=\"clickable\" data-tip data-for=\"infoEscapeTooltip\" data-effect=\"solid\" data-place=\"bottom\">\n            <img src={EarnSVG} alt=\"earn\" />\n            <div>earn ESCAPE</div>\n          </div>\n        </div>\n        <br></br>\n        <div className=\"TileStore-list\">\n          <h4>Open rifts</h4>\n          {scenesDOM}\n          {newRiftComingSoon}\n        </div>\n      </div>\n    </>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default TileStore;","import React from \"react\";\n\nimport TileStore from \"../components/TileStore.js\";\n\nconst Packs = (props) => {\n  return (\n    <>\n      <div className=\"Packs-main\">\n        <TileStore {...props} />\n      </div>\n    </>\n  );\n}\n\nexport default Packs;\n  ","import React, {useState} from \"react\";\n\nconst FAQSection = (props) => {\n  const [show, setShow] = useState(false);\n  return (\n    <div className=\"faq-section\">\n      <div className=\"faq-question\" onClick={() => {setShow(!show)}}>{props.question}</div>\n      {show && <div className=\"faq-body\">{props.children}</div>}\n    </div>\n  );\n}\n\nconst About = () => {\n  return (\n    <div className=\"faq-main\">\n      <FAQSection question=\"What are EtherScapes?\">\n        <p>\n          EtherScapes are procedurally generated NFT puzzles. \n        </p>\n        <p>\n          Each rift in our collection is made up puzzle pictures. Each puzzle is \n          made of puzzle shards. Solve puzzles by collecting all the relevant \n          shard pieces and trading them in for a super-rare puzzle NFT. \n        </p>\n      </FAQSection>\n\n      <FAQSection question=\"How does it work?\">\n        <p>\n          Purchase shards from open rifts with Ether or ESCAPE tokens. Each rift\n          has a limited number of shards available - grab yours today!\n        </p>\n        <p>\n          Each shard is minted at random by the rift, once you have all the shards\n          in a puzzle, you can trade them in for the solved puzzle NFT. This NFT\n          is special and earns you 1 ESCAPE per day per solved NFT you own!\n        </p>\n      </FAQSection>\n      \n      <FAQSection question=\"ESCAPEs? What are these?\">\n        <p>\n          ESCAPEs are a tradeable ERC20 token that is minted by the EtherScapes contract\n          anytime a puzzle in a rift is solved. \n        </p>\n        <p>\n          Use ESCAPE to purchase tiles from open rifts. \n        </p>\n        <p>\n          ESCAPEs can also be used to give each rift puzzle a unique name of your \n          choosing. To assign a name to a puzzle, you must own the NFT for the puzzle\n          you are trying to name. Each time a picture is named, the naming cost \n          for the picture doubles.\n        </p>\n      </FAQSection>\n\n      <FAQSection question=\"Other market integration?\">\n        <p>\n          The EtherScape shards and solved puzzles are all tradeable NFTs (ERC1155\n          tokens). This means you can sell or trade the shards or puzzles on markets\n          like OpenSea and Rarible. \n        </p>\n        <p>\n          Find the pieces you are missing and trade duplicates to solve puzzles and \n          earn ESCAPE today!\n        </p>\n      </FAQSection>\n\n      <FAQSection question=\"Can I see the code?\">\n        <p>\n          All of the code involved in this project is available on GitHub and is \n          100% open source. Check out our \n          <a href=\"https://github.com/etherscapes\">GitHub project page</a> for more info.\n        </p>\n        <p>\n          The contract was developed using Solidity, with tests implemented to boot.\n          The website is a React app hosted on GitHub pages, with the NFT metadata \n          currently hosted also via a public GitHub metadata project. Additionally,\n          this project uses a simple python project to cut up puzzle images into \n          N number of shards based on SVG cutouts that we generate.\n        </p>\n        <p>\n          We love feedback, and would appreciate your thoughts either in our \n          <a href=\"https://discord.gg/kTmmeB6bes\">Discord</a>, \n          <a href=\"https://reddit.com/r/etherscapes\">Reddit</a>,\n          <a href=\"https://github.com/etherscapes\">GitHub</a> channels.\n        </p>\n      </FAQSection>\n    </div>\n  );\n}\n\nexport default About;\n  ","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport PuzzleViewer from \"./PuzzleViewer.js\";\nimport Packs from \"./Packs.js\";\nimport Shard from \"./Shard.js\";\nimport About from \"./About.js\";\n\n\nconst MainLayout = (props) => {\n  return (\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\n      <Route exact path=\"/\">\n        <Packs page=\"Home\" {...props} />\n      </Route>\n      <Route exact path=\"/scene/:sid/puzzle/:pid\">\n        <PuzzleViewer page=\"PuzzleViewer\" {...props} />\n      </Route>\n      <Route exact path=\"/shard/:id\">\n        <Shard page=\"Shard\" {...props} />\n      </Route>\n      <Route exact path=\"/about\">\n        <About></About>\n      </Route>\n      <Route path=\"*\">\n        <h3>Not sure what you are looking for ... 404!</h3>\n      </Route>\n    </Switch>\n  );\n}\n  \nexport default MainLayout;","import React from \"react\";\n\nimport RedditSVG from \"../svg/reddit.svg\";\nimport DiscordSVG from \"../svg/discord.svg\";\nimport GitHubSVG from \"../svg/github.svg\";\n\nexport const Footer = (props) => {\n  return (\n    <div className=\"footer\">\n      <span>© EtherScapes Inc</span>\n      <span className=\"grow\"></span>\n      <a className=\"github\" href=\"https://github.com/etherscapes/contract\"><span><img src={GitHubSVG} alt=\"github\"></img></span></a>\n      <a className=\"discord\" href=\"https://discord.gg/kTmmeB6bes\"><span><img src={DiscordSVG} alt=\"github\"></img></span></a>\n      <a className=\"reddit\" href=\"https://www.reddit.com/r/Etherscapes\"><span><img src={RedditSVG} alt=\"github\"></img></span></a>\n    </div>\n  );\n}","/*\n *  Entry-point for the RedVsBlue application.\n */\n\n// React and associated components.\nimport React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Web3 from \"web3\";\n\nimport MainLayout from \"./pages/MainLayout.js\";\nimport {Footer} from \"./components/Footer.js\";\n\n// Contract ABIs.\nimport _EscapeToken from \"./contract/EscapeToken.json\";\nimport _ESTile from \"./contract/ESTile.json\";\nimport _ESTileWrapper from \"./contract/ESTileWrapper.json\";\nimport _NamingContract from \"./contract/NamingContract.json\";\n\nimport \"./App.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n  // App constructor - sets up default state.\n  constructor(props) {\n    super(props);\n      \n    this.updateAccounts = this.updateAccounts.bind(this);\n\n    this.web3 = null;\n    this.contracts = {};\n    this.contracts_abi = {};\n    this.accounts = [];\n\n    this.state = {\n      // Number of ESCAPE credit balance for user.\n      escapeBalance: toBN(0),\n      escapeClaimable: toBN(0),\n\n      // Total scene info stuff.\n      numScenes: 0,\n\n      // Number of solved puzzle tokens.\n      numClaims: 0,\n\n      escape: undefined,\n      namer: undefined,\n      estile: undefined,\n      estilewrap: undefined,\n\n      error: undefined,\n    };\n  }\n\n  // mounted ::\n  componentDidMount() {\n    return this.initWeb3();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Helpers.\n  ////////////////////////////////////////////////////////////////////////////\n\n  resolve_promise = (f, args=[]) => {\n    return new Promise((resolve, reject) => {\n      f(...args, (err, result) => {\n        if (err !== null) reject(err);\n        else resolve(result);\n      });\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Contract basics.\n  ////////////////////////////////////////////////////////////////////////////\n\n  initWeb3 = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        this.updateAccounts(accounts);\n        window.ethereum.on(\"accountsChanged\", this.updateAccounts);\n        window.ethereum.enable();\n      } catch (err) {\n        console.log(\"User denied web3 account access\");\n        return;\n      }\n      this.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.error(\"No web3 provider detected!\");\n      this.setState({error: \"Oops, this app needs a Web3 enabled browser!\"});\n      return;\n    }\n\n    return this.instantiateContracts();\n  }\n\n  updateAccounts = async (accounts) => {\n    const firstTime = !(this.accounts && this.accounts[0]);\n    this.accounts = accounts || await this.web3.eth.getAccounts();\n    if (!firstTime) {\n      this.updateApp();\n    }\n  }\n\n\n\n  claimReward = async () => {\n    return await this.state.estile.claimReward({from: this.accounts[0]});\n  }\n\n  instantiateContracts = async () => {\n    const contract = require(\"@truffle/contract\");\n    const user = this.accounts[0];\n    \n    this.contracts_abi.EscapeToken = contract(_EscapeToken);\n    this.contracts_abi.ESTile = contract(_ESTile);\n    this.contracts_abi.ESTileWrapper = contract(_ESTileWrapper);\n    this.contracts_abi.NamingContract = contract(_NamingContract);\n\n    this.contracts_abi.EscapeToken.setProvider(window.web3.currentProvider);\n    this.contracts_abi.ESTile.setProvider(window.web3.currentProvider);\n    this.contracts_abi.ESTileWrapper.setProvider(window.web3.currentProvider);\n    this.contracts_abi.NamingContract.setProvider(window.web3.currentProvider);\n\n    let escape = await this.contracts_abi.EscapeToken.deployed();\n    let estile = await this.contracts_abi.ESTile.deployed();\n    let estilewrap = await this.contracts_abi.ESTileWrapper.deployed();\n    let namer = await this.contracts_abi.NamingContract.deployed();\n\n    await this.subscribeToEvents(estile);    \n\n    let escapeBalance = await escape.balanceOf(user);\n    let escapeClaimable = await estile.getClaimInfo({from: user});\n    let numClaims = await estile.claimLength(user);\n    \n    /*\n     *  Now we need to figure how many scenes there are and how many puzzles \n     *  in each scene. If we have tokens that correspond to a scene, we list \n     *  them here.\n     */\n    let numScenes = await estile.sceneCount();\n\n    /*\n     *  Update app state!\n     */\n    this.setState({\n      numClaims: numClaims,\n      numScenes: numScenes,\n      escapeBalance: escapeBalance,\n      escapeClaimable: escapeClaimable,\n\n      escape: escape,\n      estile: estile,\n      estilewrap: estilewrap,\n      namer: namer,\n    });\n  }\n\n  subscribeToEvents = async (estile) => {\n    console.log(\"subscribe...\");\n    estile.allEvents()\n      .on(\"data\", (e) => {\n        console.log(e);\n      })\n      .on(\"error\", (err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Accounts and other web3.eth stuff.\n  ////////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  //  Round updates for totals, percentages UI etc as well as refresh logic.\n  ////////////////////////////////////////////////////////////////////////////\n\n  updateApp = async() => {    \n    // console.log(\"Account0      = \", this.accounts[0]);\n    // console.log(\"EscapeToken   = \", this.contracts[\"EscapeToken\"].address);\n    // console.log(\"ESTile        = \", this.contracts[\"ESTile\"].address);\n    // console.log(\"ESTileWrapper = \", this.contracts[\"ESTileWrapper\"].address);\n    this.setState({\n      // TODO\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Contract interaction.\n  ////////////////////////////////////////////////////////////////////////////\n  \n  ////////////////////////////////////////////////////////////////////////////\n  // User Interaction.\n  ////////////////////////////////////////////////////////////////////////////\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <NavLink exact activeClassName=\"isActive\" to=\"/\">EtherScapes</NavLink>\n          <NavLink exact activeClassName=\"isActive\" to=\"/about\">FAQ</NavLink>\n          <div className=\"grow\"></div>\n          <div className=\"balance\" data-tip data-for=\"balanceTooltip\">\n            {this.state.escapeBalance.toString()} ESC\n          </div>\n          {this.state.escapeClaimable !== undefined && this.state.escapeClaimable.toNumber() > 0 && \n            <div className=\"balance clickable\" \n                 onClick={()=> {this.claimReward()}} \n                 data-tip data-for=\"claimTooltip\">\n              ({this.state.escapeClaimable.toString()}, +{this.state.numClaims.toString()} per day)\n            </div>\n          }\n          {this.state.escapeClaimable !== undefined && this.state.escapeClaimable.toNumber() === 0 && \n            <div className=\"balance\" data-tip data-for=\"claimTooltip\">\n              ({this.state.escapeClaimable.toString()}, +{this.state.numClaims.toString()} per day)\n            </div>\n          }\n          <ReactTooltip id=\"claimTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n            <p>Claimable ESCAPE, <br></br>\n               earnings per day.\n            </p>\n          </ReactTooltip>   \n          <ReactTooltip id=\"balanceTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n            <p>Your current ESCAPE balance.</p>\n          </ReactTooltip>   \n        </div>\n        <div className=\"App-body\">\n          <div className=\"App-scroll\">\n            <div style={{flexGrow: 1}}>\n              {!this.state.error &&\n                <MainLayout \n                  balance={this.state.escapeBalance}\n                  claim={this.state.escapeClaimable}\n                  numScenes={this.state.numScenes}\n                  numPacks={this.state.numPacks}\n                  escape={this.state.escape}\n                  estile={this.state.estile}\n                  namer={this.state.namer}\n                  estilewrap={this.state.estilewrap} \n                  user={this.accounts[0]}\n                />\n              }\n              {this.state.error &&\n                <div className=\"error\">{this.state.error}</div>\n              }\n            </div>\n            <Footer />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render((\n  <HashRouter>\n    <App />\n  </HashRouter>\n), document.getElementById(\"root\"));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/buy.fcafa681.svg\";","module.exports = __webpack_public_path__ + \"static/media/opensea-logo.91c20fca.svg\";","module.exports = __webpack_public_path__ + \"static/media/collect.25b81051.svg\";","module.exports = __webpack_public_path__ + \"static/media/puzzle.79cd76ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/salary.c4c37578.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.1dee27c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.e2217522.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.31145889.svg\";"],"sourceRoot":""}